{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/imsewonyyy/AI-/blob/main/%EC%A7%84%EC%A7%9C%EC%B0%90%EC%A7%9C%EC%B5%9C%EC%A2%85_%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4%20A\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#1. 연습문제/과제풀이\n",
        "\n",
        "# A: 6장 신규노선 항공운임예측 풀기"
      ],
      "metadata": {
        "id": "ftY_88qlC06H"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "#### Colab 한글 폰트 설정하기\n",
        "Colab에서 한글 폰트를 사용하려면 폰트를 설치하고 런타임을 재시작한 후, Matplotlib 설정을 변경해야 합니다.\n",
        "\n",
        "**1) 폰트 설치 (코드 셀에서 실행)**"
      ],
      "metadata": {
        "id": "jspykp99aXUS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!sudo apt-get install -y fonts-nanum\n",
        "!sudo fc-cache -fv\n",
        "!rm ~/.cache/matplotlib -rf"
      ],
      "metadata": {
        "id": "O6U-uFjgpvEw",
        "outputId": "7e89b8ce-5cf1-4cf3-df1a-e7f800a27974",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "The following NEW packages will be installed:\n",
            "  fonts-nanum\n",
            "0 upgraded, 1 newly installed, 0 to remove and 35 not upgraded.\n",
            "Need to get 10.3 MB of archives.\n",
            "After this operation, 34.1 MB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu jammy/universe amd64 fonts-nanum all 20200506-1 [10.3 MB]\n",
            "Fetched 10.3 MB in 1s (7,599 kB/s)\n",
            "debconf: unable to initialize frontend: Dialog\n",
            "debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 78, <> line 1.)\n",
            "debconf: falling back to frontend: Readline\n",
            "debconf: unable to initialize frontend: Readline\n",
            "debconf: (This frontend requires a controlling tty.)\n",
            "debconf: falling back to frontend: Teletype\n",
            "dpkg-preconfigure: unable to re-open stdin: \n",
            "Selecting previously unselected package fonts-nanum.\n",
            "(Reading database ... 126111 files and directories currently installed.)\n",
            "Preparing to unpack .../fonts-nanum_20200506-1_all.deb ...\n",
            "Unpacking fonts-nanum (20200506-1) ...\n",
            "Setting up fonts-nanum (20200506-1) ...\n",
            "Processing triggers for fontconfig (2.13.1-4.2ubuntu5) ...\n",
            "/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n",
            "/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n",
            "/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/nanum: caching, new cache contents: 12 fonts, 0 dirs\n",
            "/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n",
            "/root/.local/share/fonts: skipping, no such directory\n",
            "/root/.fonts: skipping, no such directory\n",
            "/usr/share/fonts/truetype: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n",
            "/var/cache/fontconfig: cleaning cache directory\n",
            "/root/.cache/fontconfig: not cleaning non-existent cache directory\n",
            "/root/.fontconfig: not cleaning non-existent cache directory\n",
            "fc-cache: succeeded\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2) 런타임 재시작**\n",
        "* Colab 메뉴에서 **[런타임] > [세션 다시 시작]**을 클릭합니다. (Ctrl+M .)\n",
        "\n",
        "**3) Matplotlib 폰트 설정 (세션 재시작 후)**\n"
      ],
      "metadata": {
        "id": "xQZIR4EsafVK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "    import matplotlib.pyplot as plt\n",
        "    import matplotlib.font_manager as fm\n",
        "\n",
        "    # 런타임 재시작 후 Nanum 폰트 확인 및 설정\n",
        "    font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'\n",
        "    font_prop = fm.FontProperties(fname=font_path)\n",
        "\n",
        "    # 전역 폰트 설정\n",
        "    plt.rc('font', family='NanumGothic')\n",
        "    # 마이너스 기호 깨짐 방지\n",
        "    plt.rcParams['axes.unicode_minus'] = False\n",
        "\n",
        "    print(\"한글 폰트 'NanumGothic' 설정 완료.\")\n",
        "\n",
        "    # 이제 그래프에 한글 사용 가능 (test 용)\n",
        "    fig, ax = plt.subplots(figsize=(8, 5))\n",
        "    x = [1, 2, 3, 4, 5]\n",
        "    y = [10, 8, 6, 4, 2]\n",
        "    ax.plot(x, y, marker='o')\n",
        "    ax.set_title('한글 제목')\n",
        "    ax.set_xlabel('한글 X축')\n",
        "    ax.set_ylabel('한글 Y축')\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "42esYrWEah5J",
        "outputId": "30ac9c2b-8d4d-4172-f1e4-1e28a1a0b574"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "한글 폰트 'NanumGothic' 설정 완료.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54620 (\\N{HANGUL SYLLABLE HAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44544 (\\N{HANGUL SYLLABLE GEUL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52629 (\\N{HANGUL SYLLABLE CUG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51228 (\\N{HANGUL SYLLABLE JE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47785 (\\N{HANGUL SYLLABLE MOG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "eqqAjgbMWjuP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "먼저, 데이터 파일을 불러옴."
      ],
      "metadata": {
        "id": "km4j_WkbWnd_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 77
        },
        "id": "_lWa1YELCU5e",
        "outputId": "8acee91d-4536-4187-f739-0a3f6a0dbbb2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-cbb80090-0eb0-4db0-aab5-37e9ea8caa01\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-cbb80090-0eb0-4db0-aab5-37e9ea8caa01\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Airfares.csv to Airfares.csv\n"
          ]
        }
      ],
      "source": [
        "from google. colab import files\n",
        "uploaded=files.upload()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# a. 수치형 예측 변수들과 결과 변수인 운임(FARE)에 대한 표본 만들고 운임과 예측 변수들 사이의 상관도를 조사하시오. 어떤 예측 변수와 운임을 예측하는 데 최적의 예측 변수인가?"
      ],
      "metadata": {
        "id": "wiDkwtn3DOH0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. 수치형 변수 선택\n",
        "\n",
        "수치형(연속형) 변수만 대상으로 해야 하므로 범주형 변수는 제외하고 다음과 같은 변수들을 선택함:\n",
        "\n",
        "COUPON, NEW, HI, S_INCOME, E_INCOME, S_POP, E_POP, DISTANCE, PAX\n",
        "\n",
        "2. 운임(FARE)과의 상관계수 계산\n",
        "\n",
        "상관계수(Pearson correlation coefficient)를 FARE에 대해 계산하면, 어떤 변수가 운임과 직선적으로 얼마나 강한 관계를 가지는지 알 수 있음."
      ],
      "metadata": {
        "id": "qObxhty5DWSz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(\"Airfares.csv\")\n",
        "\n",
        "# 수치형 변수만 필터링\n",
        "numeric_vars = ['COUPON', 'NEW', 'HI', 'S_INCOME', 'E_INCOME', 'S_POP', 'E_POP', 'DISTANCE', 'PAX', 'FARE']\n",
        "corr_matrix = df[numeric_vars].corr()\n",
        "\n",
        "# 운임(FARE)과 다른 변수들 간의 상관계수 정렬\n",
        "fare_corr = corr_matrix['FARE'].drop('FARE').sort_values(ascending=False)\n",
        "print(fare_corr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8aN56-VdDKr_",
        "outputId": "31b6f648-bb75-46be-fece-6301f2fe5d43"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DISTANCE    0.670016\n",
            "COUPON      0.496537\n",
            "E_INCOME    0.326092\n",
            "E_POP       0.285043\n",
            "S_INCOME    0.209135\n",
            "S_POP       0.145097\n",
            "NEW         0.091730\n",
            "HI          0.025195\n",
            "PAX        -0.090705\n",
            "Name: FARE, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "운임(FARE)을 예측하는 데 있어 가장 효과적인 수치형 변수들을 파악하기 위해, 각 변수와 FARE 간의 Pearson 상관계수를 계산하였다. 상관계수가 클수록 두 변수 간의 선형적 관계가 강하다고 해석할 수 있다.\n",
        "\n",
        "* DISTANCE(거리) 변수는 운임과 가장 높은 양의 상관계수(0.6700)를 보여주며,\n",
        "운임 예측에 가장 효과적인 변수로 나타났다. 이는 항공 노선의 거리가 멀수록 평균 항공료가 높아지는 일반적인 경제 원칙과도 부합한다.\n",
        "\n",
        "* COUPON, E_INCOME도 다소 의미 있는 양의 상관을 보이며, 운임에 일정 수준의 영향을 주는 변수로 판단된다.\n",
        "\n",
        "* 반면 PAX(탑승객 수)는 음의 상관(-0.0907)을 보이며, 탑승객 수가 많을수록 운임이 낮아지는 경향을 나타낸다.\n",
        "\n",
        "* HI(시장 집중도)와 NEW(신규 항공사 수) 등은 상관도가 낮아 단일 변수로서의 예측력은 크지 않을 것으로 보인다.\n",
        "\n",
        "결론:\n",
        "\n",
        "운임(FARE)을 예측하는 데 **가장 효과적인 수치형 변수는 DISTANCE**이며, 그 다음으로 COUPON과 E_INCOME이 유의미한 예측력을 보였다."
      ],
      "metadata": {
        "id": "F7dt0hXhD4Wl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# b. 범주형 예측 변수들(예: SW 등)에 대해 범주별로 평균 운임의 차이와 분산의 패턴을 분석하고, 어떤 범주형 예측 변수가 운임 예측에 가장 좋은지를 평가하라."
      ],
      "metadata": {
        "id": "1JuSMqZIESiw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "범주형 변수는 주로 다음과 같음:\n",
        "\n",
        "* SW : Southwest 항공 운항 여부 (Yes/No)\n",
        "\n",
        "* VACATION : 휴양지 여부 (Yes/No)\n",
        "\n",
        "* SLOT : 공항의 슬롯 (Free/Controlled)\n",
        "\n",
        "* GATE: 게이트 제한 여부 (Free/Constrained)\n",
        "\n",
        "* NEW도 범주형으로 처리 가능\n",
        "\n",
        "이 중에서 **SW, VACATION, SLOT, GATE**를 주요 분석 대상으로 삼음."
      ],
      "metadata": {
        "id": "bsgqNEffEw7V"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "그 다음, 각 범주형 변수의 그룹별 평균 운임 확인"
      ],
      "metadata": {
        "id": "cKR4dUZDFErC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# SW 변수에 따른 평균 운임 확인\n",
        "print(df.groupby('SW')['FARE'].mean())\n",
        "print(df.groupby('SW')['FARE'].std())\n",
        "\n",
        "print(df.groupby('VACATION')['FARE'].mean())\n",
        "print(df.groupby('VACATION')['FARE'].std())\n",
        "\n",
        "print(df.groupby('SLOT')['FARE'].mean())\n",
        "print(df.groupby('GATE')['FARE'].mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iZs2qaY9FKOD",
        "outputId": "21cb0b77-a4fb-4071-c6af-2c9fb64ecbd9"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SW\n",
            "No     188.182793\n",
            "Yes     98.382268\n",
            "Name: FARE, dtype: float64\n",
            "SW\n",
            "No     70.558360\n",
            "Yes    44.795629\n",
            "Name: FARE, dtype: float64\n",
            "VACATION\n",
            "No     173.552500\n",
            "Yes    125.980882\n",
            "Name: FARE, dtype: float64\n",
            "VACATION\n",
            "No     81.086891\n",
            "Yes    44.102634\n",
            "Name: FARE, dtype: float64\n",
            "SLOT\n",
            "Controlled    186.059396\n",
            "Free          150.825680\n",
            "Name: FARE, dtype: float64\n",
            "GATE\n",
            "Constrained    193.129032\n",
            "Free           153.095953\n",
            "Name: FARE, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "따라서 결론은 이러함.\n",
        "\n",
        "* SW 변수는 Yes일 때 평균 운임이 훨씬 낮아짐 → 항공사 경쟁 효과로 해석 가능. 운임 예측에 매우 유의미.\n",
        "\n",
        "* **SLOT, GATE**는 제약이 있는 경우 운임이 높음 → 공항 인프라의 제약이 가격에 영향을 미친다는 해석.\n",
        "\n",
        "* **VACATION**은 유의미한 차이를 보일 수도 있지만 경우에 따라 차이가 작을 수 있음.\n",
        "\n",
        "결론적으로 운임 예측에 **가장 유효한 범주형 변수는 SW**로 나타났으며, SLOT, GATE도 유의미한 설명력을 가진다."
      ],
      "metadata": {
        "id": "htcqlMjuFSvX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "--------------------------------------------------------------------"
      ],
      "metadata": {
        "id": "MxEWaHHCVMrg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. 연습문제 C번 / 새로운 노선의 평균 운임을 예측하는 모델을 찾으시오."
      ],
      "metadata": {
        "id": "QH3QO9Zv4sZ4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "C - i 번 / 범주형 변수(ex. SW)들을 가변수로 변환하시오. 그런 다음, 데이터를 학습 데이터셋과 검증 데이터셋으로 분할하시오. 학습 데이터셋에 모델을 적합하고 이를 검증 데이터셋으로 평가하시오."
      ],
      "metadata": {
        "id": "p43Lv1OS5qEN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. 필요 라이브러리 불러오기"
      ],
      "metadata": {
        "id": "kOSS0Ea48aRE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "Y_sn6lis3vvM"
      },
      "outputs": [],
      "source": [
        "import pandas as pd # (맨 처음에 이미 언급되어 중복 시 생략 가능)\n",
        "from sklearn.model_selection import train_test_split # 데이터를 학습용 / 검증용으로 나누는 함수, 전체 데이터를 70:30 비율로 분할하여 모델 훈련과 성능 평가에 사용\n",
        "from sklearn.linear_model import LinearRegression # 선형 회귀 모델 객체를 생성\n",
        "from sklearn.metrics import mean_squared_error, r2_score # 모델의 성능 평가 지표를 계산, {mean_squared_error: 예측값과 실제값 사이의 평균 제곱 오차 (RMSE 등으로 활용), r2_score: 결정계수 (모델 설명력, 1에 가까울수록 좋음)}"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. 데이터 불러오기 & 범주형 변수 가변수화"
      ],
      "metadata": {
        "id": "Ad3GGt9D8Yf9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 데이터 로딩 (이미 a번 문제에서 df로 불러왔기에 생략 가능)\n",
        "\n",
        "\n",
        "# 범주형 변수 가변수화 (drop_first로 다중공선성 방지)\n",
        "categorical_vars = ['S_CODE', 'S_CITY', 'E_CODE', 'E_CITY', 'VACATION', 'SW', 'SLOT', 'GATE'] # 'S_CODE', 'S_CITY', 'E_CODE', 'E_CITY'도 범주형 변수임. 허나, '숫자적 의미가 없고 명목형 데이터'임으로 회귀 모델에서 사용하기 위해서는 가변수 처리되어야 함.\n",
        "df_encoded = pd.get_dummies(df, columns=categorical_vars, drop_first=True)\n",
        "# pd.get_dummies() : 범주형을 숫자형 가변수로 변환\n",
        "# columns=categorical_vars : 가변수화할 범주형 변수 지정\n",
        "# drop_first=True\t: 첫 범주는 제거하여 중복 방지\n",
        "# df_encoded : 새 데이터프레임으로 저장\n",
        "bool_cols = df_encoded.select_dtypes(include='bool').columns\n",
        "df_encoded[bool_cols] = df_encoded[bool_cols].astype(int)\n",
        "\n",
        "\n",
        "\n",
        "# 결측치 제거\n",
        "df_encoded.dropna(inplace=True)\n"
      ],
      "metadata": {
        "collapsed": true,
        "id": "c4xXxUCK4NM2"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. 변수 분리 및 학습 & 검증데이터셋으로 분할"
      ],
      "metadata": {
        "id": "cMbBT8TZ9APr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_encoded.drop(columns=['FARE'])  # 독립변수(전체 데이터프레임 (운임에 영향을 줄 수 있는 변수들))\n",
        "y = df_encoded['FARE']                 # 종속변수(예측 대상인 FARE (운임))\n",
        "\n",
        "# 학습 70% / 검증 30% 분할\n",
        "X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "# X_train, y_train : 학습용 데이터 70개\n",
        "# X_valid, y_valid : 검증용 데이터 30개\n",
        "# train_test_split\t: 이 두 데이터를 자동으로 나누어주는 함수\n",
        "# random_state=42\t: 데이터 분할을 매번 같게 유지하기 위한 시드값 (재현 가능성 확보)"
      ],
      "metadata": {
        "id": "_IScnfJR7vmd"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. 회귀 모델 학습 및 평가"
      ],
      "metadata": {
        "id": "Po_rzPqx-JtF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 선형 회귀 모델 학습\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train) # 학습 데이터로 모델 훈련. 즉, 변수들의 계수(회귀계수)를 학습하여 운임(FARE)를 예측할 수 있도록 함\n",
        "\n",
        "\n",
        "# 예측\n",
        "y_pred = model.predict(X_valid) # 훈련된 모델에 검증 데이터(X_valid)를 넣어 운임 예측값 y_pred 생성\n",
        "\n",
        "# 성능 평가\n",
        "#rmse = mean_squared_error(y_valid, y_pred, squared=False) # squared = False : 평균 제곱 오차(mse : mean squared error)의 제곱근을 구하는  → RMSE 계산\n",
        "# 위 코딩에서 오류 발생 시 다음 코딩 사용할 것\n",
        "mse = mean_squared_error(y_valid, y_pred)\n",
        "rmse = mse**0.5\n",
        "r2 = r2_score(y_valid, y_pred) # r2 : 모델이 전체 데이터의 분산(변동)을 얼마나 잘 설명하는지를 수치화\n",
        "\n",
        "print(f\"검증 RMSE: {rmse:.2f}\")\n",
        "print(f\"검증 R²: {r2:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AM9X3ac6-Gyd",
        "outputId": "8f3a7c2c-020a-4e58-c1fe-331920546c02"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "검증 RMSE: 31.42\n",
            "검증 R²: 0.8380\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. 평가 결과"
      ],
      "metadata": {
        "id": "EFJ8HSUgELOP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "검증 RMSE: 31.42\n",
        "검증 R²: 0.8380\n",
        "\n",
        "검증 결과로 나온 다음 두 성능 지표는 모델이 얼마나 정확하게 항공 운임을 예측했는지를 나타냄.\n",
        "\n",
        "\n",
        "RMSE (Root Mean Squared Error): 31.42 라는 지표를 통해 모델이 예측한 항공 운임이 실제 값과 평균적으로 약 31.42달러 차이가 난다는 것을 알 수 있음.\n",
        "\n",
        "\n",
        "R² (결정계수): 0.8380 라는 지표를 통해 전체 운임 변동성의 약 83.8%를 모델이 설명하고 있다는 것을 알 수 있음. 매우 우수한 성능을 가진 모델임"
      ],
      "metadata": {
        "id": "PJ1xpdvcEOJ_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "**김정은_문제풀이**"
      ],
      "metadata": {
        "id": "ta_tJ4cLm4PQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**추가적인 모델 성능 검증**"
      ],
      "metadata": {
        "id": "5K3N0GexnIKl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kmKhCx6FVaaN",
        "outputId": "0004e79a-ac69-46bc-e9c3-8d4063843f73",
        "collapsed": true
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([130.33134527,  95.6415181 , 131.52513736, 121.02301717,\n",
              "       291.26933094, 108.56401284, 154.53163176, 183.84857439,\n",
              "       285.1971572 , 307.40612531, 309.41649256, 262.53139199,\n",
              "       215.89106481, 238.93596158, 164.55093183, 280.39434952,\n",
              "       128.21364199, 197.22714649, 281.05386732,  54.8334003 ,\n",
              "       152.06134106, 164.1713304 , 274.62406445, 168.32345918,\n",
              "       113.93650031, 214.62376976, 177.60822382, 155.75056065,\n",
              "       123.70942793, 216.303847  , 155.49556996, 262.11616539,\n",
              "       217.89260801, 102.30416275, 290.08412317, 156.81042732,\n",
              "        15.42159244, 285.54284548, 180.07755805, 155.98337872,\n",
              "       108.40608666, 134.36945136,  76.10652094, 167.46461099,\n",
              "        11.30502549, 162.1406246 ,  29.08802804, 181.34905095,\n",
              "       252.44236317,  20.27072313, -51.49702736, 240.2200265 ,\n",
              "       155.79735097, 190.30558306,  89.66317989,  59.4628058 ,\n",
              "       168.77418137, 222.46911242, 110.29291907, 137.45124387,\n",
              "       136.98832329,  -4.88412583, 157.1561156 , 187.56579231,\n",
              "       169.48000753, 236.20880104, 146.24084989, 118.11135755,\n",
              "       191.73301824, 264.87087468,  40.74851979, 119.56472176,\n",
              "       -21.3078062 ,  65.47779298, 120.49276276, 198.49828906,\n",
              "        77.87731356, 121.80719437, 140.35024785, 261.44172869,\n",
              "        96.67918859,  25.62329813, 230.77630669, -11.16177471,\n",
              "       105.54940796, 188.45730707, 279.46621227, 113.94703768,\n",
              "       180.99318418, 306.36841628,  92.08558116, 147.33051319,\n",
              "       111.61983705,  92.80494159, 153.92121852, 223.89186207,\n",
              "       -22.06414192, 256.07250338,  70.19209929, 106.92026148,\n",
              "       119.49660459, 119.93335387, 278.46318929, 111.93667043,\n",
              "       212.69856638, 287.54596181, 283.674294  ,  28.05176236,\n",
              "       117.70861341, 169.4602843 , 169.0951398 , 204.51364588,\n",
              "       136.93795294, 127.66619523, 203.76921818, 186.5422984 ,\n",
              "       278.10794109, 110.53845567,  23.52369231, 156.26669267,\n",
              "       133.5006485 , 231.95870109, 245.45687967,  54.47883158,\n",
              "        78.28222921, 282.50281615, 262.31996493, 125.84236712,\n",
              "       178.28245324, 268.44761579, 185.7123972 , 162.7578949 ,\n",
              "        49.49008143, 180.60432858, 105.01167689, 120.14707833,\n",
              "        -9.99682877, 139.65315339, 302.16153684, 107.43711909,\n",
              "        45.87771295,  86.78320597, 149.2332703 , 131.75268037,\n",
              "       185.32880082,  99.74149995, 267.63537535, 115.65256496,\n",
              "       145.67652034, 237.1496854 , 102.83847811,  81.84047652,\n",
              "       255.73650511,  68.89247593,  78.20505956,   4.90103944,\n",
              "       136.52083626,  63.48003188,  93.99696848, 308.2531825 ,\n",
              "        75.61685258, 328.0088869 , 198.37576146,  98.5950271 ,\n",
              "       200.96070432, 120.1023609 , 154.61897819, 167.45138844,\n",
              "        61.54076456, 100.13049626,  78.27712561,  17.46903252,\n",
              "       111.08347598, 312.1656421 , 106.75157914, 101.88308476,\n",
              "        35.04094342, 158.24031528, 232.16321509, 168.88763236,\n",
              "       228.14006763, 234.80890532, 203.80170382,  58.97595405,\n",
              "       171.09019697, 304.41976514, 110.57438008, 227.49836899,\n",
              "        75.65510754,  83.36936713,   2.17926923, 154.08144576])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**=> 예측 운임료가 음수인 경우 존재 -> 이상값**"
      ],
      "metadata": {
        "id": "S3I7t5VzK5J7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. 실제 운임료(y_valid)과 비교해 모델 성능 평가**\n",
        "- 이상치 분석, 오차가 큰 노선 경향 찾기"
      ],
      "metadata": {
        "id": "wMV27DQ3-Kx3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 산점도를 통한 시각적 분석\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.scatter(y_valid, y_pred)\n",
        "plt.xlabel(\"Actual FARE\")\n",
        "plt.ylabel(\"Predicted FARE\")\n",
        "plt.title(\"actual fare vs predicted fare\")\n",
        "plt.plot([y_valid.min(), y_valid.max()], [y_valid.min(), y_valid.max()], 'r--')  # 완벽 예측선\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "b1VUqrjQWuiL",
        "outputId": "5ba8d710-253e-4550-ca97-d0f4e8406093"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 예측 운임료가 음수인 경우가 있음 => 이상치나, 모델 문제가 있을 수 있음"
      ],
      "metadata": {
        "id": "l1idF9ygdlZd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**오차계산을 통해 이상치 찾기**"
      ],
      "metadata": {
        "id": "5o8rF8buYPGE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 예측값과 실제값 차이 (잔차) 계산\n",
        "errors = y_valid.values - y_pred  # 잔차 = 실제값 - 예측값\n",
        "\n",
        "# DataFrame으로 정리\n",
        "results_df = pd.DataFrame({\n",
        "    '실제 운임': y_valid.values,\n",
        "    '예측 운임': y_pred,\n",
        "    '오차 (실제 - 예측)': errors})\n"
      ],
      "metadata": {
        "id": "l0DxrNaSXt5N"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 예측이 실제보다 훨씬 높은 (예측 과대) 상위 5개\n",
        "over_predictions = results_df.sort_values(by='오차 (실제 - 예측)').head(5)\n",
        "print(\"📈 운임 과대예측 TOP 5\")\n",
        "print(over_predictions)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ONGOte7lXzwz",
        "outputId": "12f7191b-d0fa-4134-de3e-e5f5225292d9"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📈 운임 과대예측 TOP 5\n",
            "      실제 운임       예측 운임  오차 (실제 - 예측)\n",
            "114  110.42  203.769218    -93.349218\n",
            "29   125.90  216.303847    -90.403847\n",
            "182  133.50  203.801704    -70.301704\n",
            "47   113.99  181.349051    -67.359051\n",
            "82   174.06  230.776307    -56.716307\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 예측이 실제보다 훨씬 낮은 (예측 과소) 상위 5개\n",
        "under_predictions = results_df.sort_values(by='오차 (실제 - 예측)', ascending=False).head(5)\n",
        "print(\"📉 운임 과소예측 TOP 5\")\n",
        "print(under_predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6yp8S0rTX7Hq",
        "outputId": "7f877097-1ccb-4261-da61-493673153045"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📉 운임 과소예측 TOP 5\n",
            "      실제 운임       예측 운임  오차 (실제 - 예측)\n",
            "190  105.45    2.179269    103.270731\n",
            "50    49.77  -51.497027    101.267027\n",
            "72    57.62  -21.307806     78.927806\n",
            "96    55.57  -22.064142     77.634142\n",
            "102  349.97  278.463189     71.506811\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results_df['절댓값 오차'] = results_df['오차 (실제 - 예측)'].abs()\n",
        "largest_errors = results_df.sort_values(by='절댓값 오차', ascending=False).head(5)\n",
        "print(\"❗ 오차가 가장 큰 TOP 5 노선\")\n",
        "print(largest_errors)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ov7vzdcdYFkZ",
        "outputId": "369d5a6f-5aa6-4b5f-ac0e-4022026ed25c"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "❗ 오차가 가장 큰 TOP 5 노선\n",
            "      실제 운임       예측 운임  오차 (실제 - 예측)      절댓값 오차\n",
            "190  105.45    2.179269    103.270731  103.270731\n",
            "50    49.77  -51.497027    101.267027  101.267027\n",
            "114  110.42  203.769218    -93.349218   93.349218\n",
            "29   125.90  216.303847    -90.403847   90.403847\n",
            "72    57.62  -21.307806     78.927806   78.927806\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 오차가 큰 노선들의 전체 특성을 X_valid에서 함께 출력\n",
        "import numpy as np\n",
        "\n",
        "# 예측값 vs 실제값 vs 오차\n",
        "errors = y_valid.values - y_pred\n",
        "\n",
        "results_df = pd.DataFrame({\n",
        "    '실제 운임': y_valid.values,\n",
        "    '예측 운임': y_pred,\n",
        "    '오차': errors,\n",
        "    '절댓값 오차': np.abs(errors)\n",
        "}, index=y_valid.index)  # 인덱스를 원래 인덱스로 유지!"
      ],
      "metadata": {
        "id": "GQrtMkuZYlL0"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 오차가 가장 큰 TOP 5 노선 선택\n",
        "top_error_indices = results_df.sort_values(by='절댓값 오차', ascending=False).head(5).index"
      ],
      "metadata": {
        "id": "-rAzOrIbZIm4"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# X_valid에서 해당 노선들의 입력 특성 뽑기\n",
        "top_error_features = X_valid.loc[top_error_indices]"
      ],
      "metadata": {
        "id": "hvYulyBGZKW-"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 전체 정보 합치기\n",
        "full_top_error_info = pd.concat([top_error_features, results_df.loc[top_error_indices]], axis=1)\n",
        "print(\"❗ 오차가 가장 큰 노선 5개의 특성과 예측/실제 운임 비교:\")\n",
        "print(full_top_error_info)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HZ_tGoGSZbf2",
        "outputId": "b3a03676-cd12-42b7-e6e5-6cb7b2e082e0"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "❗ 오차가 가장 큰 노선 5개의 특성과 예측/실제 운임 비교:\n",
            "     COUPON  NEW       HI  S_INCOME  E_INCOME    S_POP    E_POP  DISTANCE  \\\n",
            "549    1.04    3  3375.37   21207.0   21002.0  2105604   258019       399   \n",
            "568    1.10    3  3552.11   24575.0   20375.0  1197234   766956       357   \n",
            "81     1.06    3  8162.77   30124.0   26506.0  5787293  4459144       616   \n",
            "409    1.41    3  4014.79   29260.0   29284.0  7830332   298680      1680   \n",
            "56     1.16    3  3465.14   24575.0   22263.0  1197234   472254       602   \n",
            "\n",
            "       PAX  S_CODE_DCA  ...  E_CITY_Washington          DC  \\\n",
            "549   2789           0  ...                              0   \n",
            "568   5658           0  ...                              0   \n",
            "81   10358           0  ...                              0   \n",
            "409   3926           0  ...                              0   \n",
            "56    8810           0  ...                              0   \n",
            "\n",
            "     E_CITY_West Palm Beach     FL  VACATION_Yes  SW_Yes  SLOT_Free  \\\n",
            "549                              0             1       0          1   \n",
            "568                              0             1       1          1   \n",
            "81                               0             0       0          1   \n",
            "409                              0             1       0          0   \n",
            "56                               0             1       0          1   \n",
            "\n",
            "     GATE_Free   실제 운임       예측 운임          오차      절댓값 오차  \n",
            "549          1  105.45    2.179269  103.270731  103.270731  \n",
            "568          1   49.77  -51.497027  101.267027  101.267027  \n",
            "81           0  110.42  203.769218  -93.349218   93.349218  \n",
            "409          1  125.90  216.303847  -90.403847   90.403847  \n",
            "56           1   57.62  -21.307806   78.927806   78.927806  \n",
            "\n",
            "[5 rows x 148 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 앞서 구한 '오차가 가장 큰 TOP 5 노선'과 바로 위 코드에서 구한\n",
        "'오차가 가장 큰 노선 5개의 특성과 예측/실제 운임 비교' 에서 구한 노선의 인덱스가 다른 것은 y.predict가 인덱스 없이 순서만 있어 섞였기 때문. 인덱스만 다르게 나왔을 뿐, 동일한 노선임."
      ],
      "metadata": {
        "id": "dOSx4Ds_bf0r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**오차가 큰 노선 특징 분석 - 수치형 변수(DISTANCE, PAX)**\n",
        ": 오차가 큰 노선의 distance와 pax가 전체 검증데이터셋과 비교하여 어떠한 경향을 띠고 있는지 알기 위한 분석.\n"
      ],
      "metadata": {
        "id": "p2rTS7IRfXKW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 전체 검증셋 기준\n",
        "print(\"📊 전체 검증셋 통계 (DISTANCE & PAX)\")\n",
        "print(X_valid[['DISTANCE', 'PAX']].describe())\n",
        "\n",
        "# 분포 시각화\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 전체 Distance 분포\n",
        "plt.figure(figsize=(12, 4))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.histplot(X_valid['DISTANCE'], bins=30, kde=True)\n",
        "plt.title('Distance distribution')\n",
        "\n",
        "# 전체 Pax 분포\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.histplot(X_valid['PAX'], bins=30, kde=True)\n",
        "plt.title('Pax distribution')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "LtawL9O5efsI",
        "outputId": "f9ee345a-2049-4381-a723-e0e8d6a8245f"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 전체 검증셋 통계 (DISTANCE & PAX)\n",
            "          DISTANCE           PAX\n",
            "count   192.000000    192.000000\n",
            "mean    888.385417  13715.604167\n",
            "std     648.929886  14121.214177\n",
            "min     167.000000   2789.000000\n",
            "25%     381.250000   5779.750000\n",
            "50%     700.500000   8647.500000\n",
            "75%    1101.250000  15510.750000\n",
            "max    2579.000000  73892.000000\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 오차가 큰 TOP 5 노선 인덱스\n",
        "top_error_indices = results_df.sort_values(by='절댓값 오차', ascending=False).head(5).index\n",
        "\n",
        "# 해당 노선들의 특성\n",
        "top_errors_features = X_valid.loc[top_error_indices]\n",
        "\n",
        "print(\"📌 오차 큰 TOP 5 노선 통계 (DISTANCE & PAX)\")\n",
        "print(top_errors_features[['DISTANCE', 'PAX']].describe())\n",
        "\n",
        "# 분포 시각화\n",
        "plt.figure(figsize=(12, 4))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.histplot(top_errors_features['DISTANCE'], bins=5, kde=False)\n",
        "plt.title('TOP 5 Distance distribution')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.histplot(top_errors_features['PAX'], bins=5, kde=False)\n",
        "plt.title('TOP 5 Pax distribution')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "BbyNruP9hOwN",
        "outputId": "a4235ac5-fa37-4467-a1be-85fa2ba33605"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📌 오차 큰 TOP 5 노선 통계 (DISTANCE & PAX)\n",
            "          DISTANCE           PAX\n",
            "count     5.000000      5.000000\n",
            "mean    730.800000   6308.200000\n",
            "std     543.269454   3207.112751\n",
            "min     357.000000   2789.000000\n",
            "25%     399.000000   3926.000000\n",
            "50%     602.000000   5658.000000\n",
            "75%     616.000000   8810.000000\n",
            "max    1680.000000  10358.000000\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 두 그룹의 평균 비교 (수치 요약)\n",
        "mean_distance_all = X_valid['DISTANCE'].mean()\n",
        "mean_pax_all = X_valid['PAX'].mean()\n",
        "\n",
        "mean_distance_top5 = top_errors_features['DISTANCE'].mean()\n",
        "mean_pax_top5 = top_errors_features['PAX'].mean()\n",
        "\n",
        "print(f\"전체 평균 거리(DISTANCE): {mean_distance_all:.2f}\")\n",
        "print(f\"TOP 5 평균 거리(DISTANCE): {mean_distance_top5:.2f}\")\n",
        "print(f\"전체 평균 승객 수(PAX): {mean_pax_all:.2f}\")\n",
        "print(f\"TOP 5 평균 승객 수(PAX): {mean_pax_top5:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sV2EDyWbiE_v",
        "outputId": "4a565a4d-d228-401c-98cd-a182e2c52790"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "전체 평균 거리(DISTANCE): 888.39\n",
            "TOP 5 평균 거리(DISTANCE): 730.80\n",
            "전체 평균 승객 수(PAX): 13715.60\n",
            "TOP 5 평균 승객 수(PAX): 6308.20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**오차가 큰 top 5 노선의 특징**\n",
        "1. 평균 거리가 짧음 (1680값 외에 모두 평균보다 낮음)\n",
        "2. 평균 승객 수 극단적으로 적거나, 큼(최솟값, 최댓값 존재)\n",
        "\n",
        "=> 이 모델은 전반적으로 괜찮은 성능(R² = 0.8380)을 보이지만,\n",
        "짧은 거리 & 승객 수가 적거나 극단적으로 큰 노선에서는 예측 정확도가 떨어지는 경향이 있음."
      ],
      "metadata": {
        "id": "4WAt4E5ljVDm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**분석 결과**\n",
        "1. 노선(distance)이 짧을 수록 모델의 예측 성능 불안정\n",
        "*   앞서 최적의 예측 변수인 거리가 길수록 운임료도 선형적으로 증가한다 가정을 했으나, 오차가 비교적 많이 발생한 짧은 노선에서는 운임료가 단순히 거리로 측정되는 것이 아닌, 다른 변수(요인)가 더 강하게 작용할 가능성 높음.  \n",
        " => 짧은 거리에서 단순히 거리 기반 예측은 불안정하다.\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "2. 승객 수(pax)가 적거나, 극단적으로 큰 값에서 예측 성능 불안정\n",
        "*   극단값에는 학습 데이터가 많지 않기에, 일반화 어려운 문제\n",
        "*   선형 회귀는 이상치에 영향을 많기 받음.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "qGe-POWBiotf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. model.summary을 통한 모델 평가**\n",
        "\n",
        ":  각 변수의 회귀 계수(coefficient),\n",
        "표준 오차(std err), t-값(t), P-값(P>|t|), 결정계수(R-squared) 등 다양한 통계 정보 확인. 각 계수가 통계적으로 유의미한지(P-값이\n",
        "작은지, 보통 0.05 기준) 확인.\n",
        "\n",
        "=> 현재 LinearRegression(scikit-learn)로 만든 모델은 model.summary()작업이 불가능하여 statsmodels의 OLS(최소제곱법) 모델로 다시 만들어 확인.\n"
      ],
      "metadata": {
        "id": "LJuDrhpK9Sa4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install statsmodels\n"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29610f58-e5f8-4de3-a0ed-aeeddf158ac4",
        "id": "5R78lvWC9Sa5"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.11/dist-packages (0.14.4)\n",
            "Requirement already satisfied: numpy<3,>=1.22.3 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (2.0.2)\n",
            "Requirement already satisfied: scipy!=1.9.2,>=1.8 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (1.15.3)\n",
            "Requirement already satisfied: pandas!=2.1.0,>=1.4 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (2.2.2)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (1.0.1)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (24.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas!=2.1.0,>=1.4->statsmodels) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas!=2.1.0,>=1.4->statsmodels) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas!=2.1.0,>=1.4->statsmodels) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas!=2.1.0,>=1.4->statsmodels) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "\n",
        "# X와 y 모두 float으로 변환\n",
        "X_train_const = sm.add_constant(X_train).astype(float)\n",
        "y_train_float = y_train.astype(float)\n",
        "\n",
        "# OLS 모델 다시 학습\n",
        "model = sm.OLS(y_train_float, X_train_const).fit()\n",
        "\n",
        "# 결과 출력\n",
        "print(model.summary())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "outputId": "fb0f94af-29e9-4cac-866b-0ec85b86ed07",
        "id": "tm5HfKO59Sa5"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                   FARE   R-squared:                       0.888\n",
            "Model:                            OLS   Adj. R-squared:                  0.846\n",
            "Method:                 Least Squares   F-statistic:                     21.04\n",
            "Date:                Mon, 09 Jun 2025   Prob (F-statistic):          1.66e-102\n",
            "Time:                        14:36:50   Log-Likelihood:                -2069.4\n",
            "No. Observations:                 446   AIC:                             4385.\n",
            "Df Residuals:                     323   BIC:                             4889.\n",
            "Df Model:                         122                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "=================================================================================================\n",
            "                                    coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-------------------------------------------------------------------------------------------------\n",
            "const                          -161.6254     60.846     -2.656      0.008    -281.329     -41.922\n",
            "COUPON                            7.3069     16.683      0.438      0.662     -25.515      40.129\n",
            "NEW                              -4.8714      2.288     -2.129      0.034      -9.372      -0.370\n",
            "HI                                0.0091      0.001      6.905      0.000       0.006       0.012\n",
            "S_INCOME                          0.0006      0.002      0.410      0.682      -0.002       0.004\n",
            "E_INCOME                          0.0039      0.002      1.756      0.080      -0.000       0.008\n",
            "S_POP                           1.01e-05   2.56e-06      3.945      0.000    5.06e-06    1.51e-05\n",
            "E_POP                          1.433e-05   4.72e-06      3.038      0.003    5.05e-06    2.36e-05\n",
            "DISTANCE                          0.0811      0.005     15.253      0.000       0.071       0.092\n",
            "PAX                              -0.0011      0.000     -5.235      0.000      -0.002      -0.001\n",
            "S_CODE_DCA                       -7.2502     19.925     -0.364      0.716     -46.449      31.949\n",
            "S_CODE_EWR                       21.3585     15.244      1.401      0.162      -8.632      51.349\n",
            "S_CODE_IAD                       17.8754     17.502      1.021      0.308     -16.557      52.308\n",
            "S_CODE_JFK                       -4.9210     11.356     -0.433      0.665     -27.263      17.421\n",
            "S_CODE_LGA                       -8.5751     10.918     -0.785      0.433     -30.055      12.905\n",
            "S_CODE_MDW                        3.0261      7.641      0.396      0.692     -12.006      18.058\n",
            "S_CODE_ORD                       -2.5177     10.804     -0.233      0.816     -23.773      18.738\n",
            "S_CITY_Anchorage           AK    -5.3029     33.503     -0.158      0.874     -71.215      60.609\n",
            "S_CITY_Atlanta             GA    16.3751      8.291      1.975      0.049       0.064      32.686\n",
            "S_CITY_Austin              TX    24.5946     13.819      1.780      0.076      -2.591      51.780\n",
            "S_CITY_Baltimore/Wash Intl MD    62.7132     26.579      2.359      0.019      10.423     115.004\n",
            "S_CITY_Boise               ID    28.4663     33.195      0.858      0.392     -36.839      93.772\n",
            "S_CITY_Boston              MA     5.4135      9.368      0.578      0.564     -13.017      23.844\n",
            "S_CITY_Burbank             CA  -101.3548     21.892     -4.630      0.000    -144.423     -58.287\n",
            "S_CITY_Chicago             IL     0.5084      7.197      0.071      0.944     -13.650      14.667\n",
            "S_CITY_Cincinnati          OH    52.2409     23.136      2.258      0.025       6.724      97.757\n",
            "S_CITY_Cleveland           OH     1.5884     13.254      0.120      0.905     -24.487      27.664\n",
            "S_CITY_Columbus            OH    38.9843     14.921      2.613      0.009       9.630      68.338\n",
            "S_CITY_Corpus Christi      TX    -8.4022     26.631     -0.316      0.753     -60.795      43.991\n",
            "S_CITY_Dallas/Fort Worth   TX    59.1248     10.641      5.556      0.000      38.190      80.060\n",
            "S_CITY_Denver              CO    38.9207     12.958      3.004      0.003      13.428      64.413\n",
            "S_CITY_Detroit             MI    31.2890     15.088      2.074      0.039       1.607      60.971\n",
            "S_CITY_El Paso             TX  3.565e-12   3.82e-12      0.933      0.352   -3.95e-12    1.11e-11\n",
            "S_CITY_Fort Lauderdale     FL    22.0300     17.832      1.235      0.218     -13.051      57.112\n",
            "S_CITY_Fort Meyers         FL    17.8059     27.697      0.643      0.521     -36.683      72.295\n",
            "S_CITY_Greenville/Sprtnbg  SC   -18.5600     33.052     -0.562      0.575     -83.584      46.464\n",
            "S_CITY_Hartford            CT    22.7196     18.836      1.206      0.229     -14.336      59.775\n",
            "S_CITY_Honolulu (Intl)     HI     0.0513     35.136      0.001      0.999     -69.073      69.176\n",
            "S_CITY_Houston             TX    52.3403     10.704      4.890      0.000      31.282      73.399\n",
            "S_CITY_Jacksonville        FL    53.3394     27.074      1.970      0.050       0.076     106.602\n",
            "S_CITY_Kansas City         MO    16.6533     12.551      1.327      0.185      -8.038      41.345\n",
            "S_CITY_Las Vegas           NV    13.3676     16.085      0.831      0.407     -18.276      45.011\n",
            "S_CITY_Los Angeles         CA   -32.0345     13.735     -2.332      0.020     -59.055      -5.014\n",
            "S_CITY_Memphis             TN    28.3922     23.481      1.209      0.227     -17.803      74.587\n",
            "S_CITY_Miami               FL    32.2191     18.153      1.775      0.077      -3.494      67.932\n",
            "S_CITY_Minneapolis/St Paul MN    55.6590     18.698      2.977      0.003      18.873      92.445\n",
            "S_CITY_Nashville           TN    17.8466     31.699      0.563      0.574     -44.517      80.210\n",
            "S_CITY_New Orleans         LA    23.5549     17.867      1.318      0.188     -11.595      58.705\n",
            "S_CITY_New York/Newark     NY     7.8623     11.707      0.672      0.502     -15.170      30.895\n",
            "S_CITY_Norfolk/Va B/Pt/Ch  VA    26.1334     32.378      0.807      0.420     -37.565      89.832\n",
            "S_CITY_Oakland             CA    -8.0618     17.557     -0.459      0.646     -42.603      26.479\n",
            "S_CITY_Omaha               NE     3.6703     31.418      0.117      0.907     -58.138      65.479\n",
            "S_CITY_Orlando             FL    54.4532     19.234      2.831      0.005      16.614      92.293\n",
            "S_CITY_Philadelphia/Camden PA    10.4391     12.781      0.817      0.415     -14.705      35.583\n",
            "S_CITY_Phoenix             AZ    20.3945     11.870      1.718      0.087      -2.957      43.746\n",
            "S_CITY_Pittsburgh          PA    20.4546     34.776      0.588      0.557     -47.962      88.871\n",
            "S_CITY_Portland            OR    40.3532     34.008      1.187      0.236     -26.551     107.258\n",
            "S_CITY_Sacramento          CA     7.3663     32.316      0.228      0.820     -56.209      70.942\n",
            "S_CITY_Salt Lake City      UT     8.1569     24.512      0.333      0.740     -40.066      56.380\n",
            "S_CITY_San Diego           CA    -4.9081     13.943     -0.352      0.725     -32.338      22.522\n",
            "S_CITY_San Francisco       CA    11.7915     23.341      0.505      0.614     -34.128      57.710\n",
            "S_CITY_San Jose            CA  1.194e-11   1.34e-11      0.891      0.374   -1.44e-11    3.83e-11\n",
            "S_CITY_Seattle/Tacoma      WA     1.5551     15.240      0.102      0.919     -28.427      31.537\n",
            "S_CITY_Spokane             WA -2.077e-11   2.33e-11     -0.893      0.373   -6.65e-11     2.5e-11\n",
            "S_CITY_St Louis            MO    47.2484     22.252      2.123      0.034       3.471      91.025\n",
            "S_CITY_Tampa               FL    42.5253     26.344      1.614      0.107      -9.302      94.353\n",
            "S_CITY_Washington          DC    10.6252     13.111      0.810      0.418     -15.170      36.420\n",
            "E_CODE_DCA                      -11.0844     12.288     -0.902      0.368     -35.259      13.091\n",
            "E_CODE_EWR                        6.3673     16.307      0.390      0.696     -25.714      38.449\n",
            "E_CODE_IAD                        3.8563      8.785      0.439      0.661     -13.426      21.139\n",
            "E_CODE_JFK                      -17.7793     13.782     -1.290      0.198     -44.894       9.335\n",
            "E_CODE_LGA                      -17.4336     13.739     -1.269      0.205     -44.462       9.595\n",
            "E_CODE_MDW                      -13.9343     16.238     -0.858      0.391     -45.880      18.011\n",
            "E_CODE_ORD                       -9.6736     18.339     -0.527      0.598     -45.753      26.406\n",
            "E_CITY_Baltimore/Wash Intl MD   -74.0749     21.513     -3.443      0.001    -116.398     -31.752\n",
            "E_CITY_Birmingham          AL    24.0532     36.859      0.653      0.514     -48.461      96.568\n",
            "E_CITY_Boise               ID    46.4885     39.559      1.175      0.241     -31.337     124.314\n",
            "E_CITY_Boston              MA    -4.5925     30.971     -0.148      0.882     -65.524      56.339\n",
            "E_CITY_Buffalo             NY  2.756e-11   3.09e-11      0.892      0.373   -3.32e-11    8.83e-11\n",
            "E_CITY_Charleston          SC    13.2898     41.322      0.322      0.748     -68.005      94.585\n",
            "E_CITY_Charlotte           NC    80.9802     26.061      3.107      0.002      29.710     132.250\n",
            "E_CITY_Chicago             IL   -23.6080     16.678     -1.416      0.158     -56.419       9.203\n",
            "E_CITY_Cincinnati          OH    98.2306     37.571      2.615      0.009      24.316     172.145\n",
            "E_CITY_Cleveland           OH    14.2505     19.021      0.749      0.454     -23.171      51.672\n",
            "E_CITY_Colorado Springs    CO   -17.5230     29.905     -0.586      0.558     -76.356      41.310\n",
            "E_CITY_Columbus            OH    18.5015     24.991      0.740      0.460     -30.663      67.666\n",
            "E_CITY_Dallas/Fort Worth   TX    50.0949     20.231      2.476      0.014      10.293      89.897\n",
            "E_CITY_Denver              CO    42.5391     30.347      1.402      0.162     -17.163     102.241\n",
            "E_CITY_Detroit             MI    24.5036     24.783      0.989      0.324     -24.254      73.261\n",
            "E_CITY_El Paso             TX  -2.05e-11    2.3e-11     -0.893      0.373   -6.57e-11    2.47e-11\n",
            "E_CITY_Fort Lauderdale     FL    25.0802     22.298      1.125      0.262     -18.787      68.948\n",
            "E_CITY_Fort Meyers         FL    17.3173     26.623      0.650      0.516     -35.060      69.694\n",
            "E_CITY_Greensboro/High Pt  NC    57.7734     30.028      1.924      0.055      -1.301     116.848\n",
            "E_CITY_Hartford            CT    55.6672     22.239      2.503      0.013      11.916      99.418\n",
            "E_CITY_Honolulu (Intl)     HI    12.4347     26.629      0.467      0.641     -39.953      64.822\n",
            "E_CITY_Houston             TX    26.5615     12.344      2.152      0.032       2.278      50.845\n",
            "E_CITY_Indianapolis        IN    18.9753     17.983      1.055      0.292     -16.404      54.355\n",
            "E_CITY_Jacksonville        FL    87.6558     32.237      2.719      0.007      24.235     151.076\n",
            "E_CITY_Kansas City         MO    -7.7523     19.092     -0.406      0.685     -45.312      29.808\n",
            "E_CITY_Las Vegas           NV    24.2660     24.984      0.971      0.332     -24.885      73.417\n",
            "E_CITY_Little Rock         AR   -12.3248     38.429     -0.321      0.749     -87.928      63.279\n",
            "E_CITY_Los Angeles         CA   -75.7829     20.441     -3.707      0.000    -115.998     -35.568\n",
            "E_CITY_Louisville          KY     3.5641     27.744      0.128      0.898     -51.017      58.145\n",
            "E_CITY_Lubbock             TX -1.196e-11   1.34e-11     -0.891      0.374   -3.84e-11    1.45e-11\n",
            "E_CITY_Memphis             TN  8.442e-11   9.46e-11      0.893      0.373   -1.02e-10     2.7e-10\n",
            "E_CITY_Miami               FL    29.5583     30.036      0.984      0.326     -29.533      88.650\n",
            "E_CITY_Milwaukee           WI     1.7579     17.958      0.098      0.922     -33.571      37.087\n",
            "E_CITY_Minneapolis/St Paul MN    75.3899     17.619      4.279      0.000      40.728     110.052\n",
            "E_CITY_Nashville           TN    10.0174     21.020      0.477      0.634     -31.337      51.371\n",
            "E_CITY_New Orleans         LA    32.8460     28.783      1.141      0.255     -23.781      89.473\n",
            "E_CITY_New York/Newark     NY   -28.8457     25.142     -1.147      0.252     -78.308      20.616\n",
            "E_CITY_Oakland             CA    -0.0257     19.738     -0.001      0.999     -38.856      38.805\n",
            "E_CITY_Oklahoma City       OK    -6.9321     39.706     -0.175      0.862     -85.048      71.184\n",
            "E_CITY_Omaha               NE   -28.2447     35.879     -0.787      0.432     -98.831      42.342\n",
            "E_CITY_Orlando             FL    59.5638     26.355      2.260      0.024       7.716     111.412\n",
            "E_CITY_Philadelphia/Camden PA     3.0037     12.089      0.248      0.804     -20.779      26.787\n",
            "E_CITY_Phoenix             AZ     8.5550     17.321      0.494      0.622     -25.521      42.632\n",
            "E_CITY_Pittsburgh          PA    37.9709     21.776      1.744      0.082      -4.871      80.812\n",
            "E_CITY_Portland            OR    36.3941     21.703      1.677      0.095      -6.303      79.092\n",
            "E_CITY_Providence          RI    26.8196     24.534      1.093      0.275     -21.446      75.085\n",
            "E_CITY_Raleigh/Durham      NC    37.9426     19.673      1.929      0.055      -0.760      76.646\n",
            "E_CITY_Reno                NV    27.3950     20.800      1.317      0.189     -13.525      68.315\n",
            "E_CITY_Richmond (Intl)     VA    83.3103     26.899      3.097      0.002      30.390     136.230\n",
            "E_CITY_Rochester           NY  3.724e-15   2.67e-15      1.397      0.163   -1.52e-15    8.97e-15\n",
            "E_CITY_Sacramento          CA     1.0144     28.663      0.035      0.972     -55.375      57.404\n",
            "E_CITY_Salt Lake City      UT    30.9482     27.325      1.133      0.258     -22.809      84.705\n",
            "E_CITY_San Antonio         TX    34.4474     26.519      1.299      0.195     -17.725      86.620\n",
            "E_CITY_San Diego           CA     6.7616     16.056      0.421      0.674     -24.825      38.348\n",
            "E_CITY_San Francisco       CA   -13.3468     19.090     -0.699      0.485     -50.903      24.209\n",
            "E_CITY_San Jose            CA    19.5976     13.138      1.492      0.137      -6.250      45.445\n",
            "E_CITY_Sarasota/Bradenton  FL   -21.9127     22.630     -0.968      0.334     -66.433      22.607\n",
            "E_CITY_Seattle/Tacoma      WA   -14.5214     10.849     -1.339      0.182     -35.864       6.821\n",
            "E_CITY_Spokane             WA          0          0        nan        nan           0           0\n",
            "E_CITY_St Louis            MO    33.0253     12.894      2.561      0.011       7.658      58.392\n",
            "E_CITY_Syracuse            NY    34.2826     31.795      1.078      0.282     -28.269      96.834\n",
            "E_CITY_Tallahassee         FL          0          0        nan        nan           0           0\n",
            "E_CITY_Tampa               FL    28.2179     21.875      1.290      0.198     -14.818      71.254\n",
            "E_CITY_Tucson              AZ          0          0        nan        nan           0           0\n",
            "E_CITY_Tulsa               OK          0          0        nan        nan           0           0\n",
            "E_CITY_Washington          DC    -7.2281     10.436     -0.693      0.489     -27.759      13.302\n",
            "E_CITY_West Palm Beach     FL   -18.7366     16.627     -1.127      0.261     -51.447      13.974\n",
            "VACATION_Yes                    -40.8220     13.846     -2.948      0.003     -68.062     -13.582\n",
            "SW_Yes                          -24.4031      6.098     -4.002      0.000     -36.400     -12.406\n",
            "SLOT_Free                       -13.8510     17.396     -0.796      0.426     -48.074      20.372\n",
            "GATE_Free                        14.4389     15.795      0.914      0.361     -16.636      45.514\n",
            "==============================================================================\n",
            "Omnibus:                        2.857   Durbin-Watson:                   1.971\n",
            "Prob(Omnibus):                  0.240   Jarque-Bera (JB):                3.121\n",
            "Skew:                          -0.025   Prob(JB):                        0.210\n",
            "Kurtosis:                       3.407   Cond. No.                     5.76e+18\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The smallest eigenvalue is 4.94e-22. This might indicate that there are\n",
            "strong multicollinearity problems or that the design matrix is singular.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**모델 전체 성능**\n",
        "\n",
        "| 항목                                                    | 의미          | 해석                                |\n",
        "| ----------------------------------------------------- | ----------- | --------------------------------- |\n",
        "| `R-squared: 0.888`                                    | 결정계수        | 이 모델이 전체 운임(FARE)의 **88.8%를 설명**함 |\n",
        "| `Adj. R-squared: 0.846`                               | 조정된 결정계수    | 변수 수 고려 후에도 **84.6% 설명력 유지** (좋음) |\n",
        "| `F-statistic: 21.04`, `Prob (F-statistic): 1.66e-102` | 전체 모델 유의성   | 모델이 통계적으로 매우 유의함 (**p ≪ 0.05**)   |\n",
        "| `No. Observations: 446`, `Df Model: 122`              | 표본 수 및 변수 수 | 샘플: 446개, 독립변수: 122개              |\n"
      ],
      "metadata": {
        "id": "3ofnWwq-9Sa6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**통계적으로 유의미한 변수 (p-value < 0.05)**\n",
        "\n",
        "| 변수                         | 계수 (coef)    | p-value   | 해석                                         |\n",
        "| -------------------------- | ------------ | --------- | ------------------------------------------ |\n",
        "| `DISTANCE`                 | **+0.0811**  | **0.000** | 거리 1마일 늘면 운임 평균 **8.1센트 증가**               |\n",
        "| `PAX`                      | **-0.0011**  | **0.000** | 승객 수가 1명 늘수록 운임은 평균 **0.11센트 감소** (규모의 경제) |\n",
        "| `SW_Yes`                   | **-24.4031** | **0.000** | SW 항공사가 있으면 평균 운임이 **약 24.40달러 낮아짐**       |\n",
        "| `VACATION_Yes`             | **-40.8220** | **0.003** | 휴가용 노선일수록 평균 운임이 **약 40.82달러 낮음**          |\n",
        "| `S_CITY_Dallas/Fort Worth` | +59.12       | 0.000     | 출발지가 DFW면 운임이 **상대적으로 높음**                 |\n",
        "| `E_CITY_Los Angeles`       | **-75.78**   | **0.000** | 도착지가 LAX면 운임이 **상대적으로 낮음**                 |\n",
        "\n",
        "=> \tSW가 운행하면 평균 운임 ↓ / 휴가 노선은 낮은 운임 / 승객 수 많으면 운임 낮아짐\n"
      ],
      "metadata": {
        "id": "ZZSWTf-d9Sa6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**유의하지 않은 변수들 (p > 0.05)**\n",
        "\n",
        "S_CODE_DCA, S_CITY_Chicago, E_CITY_Boston, GATE_Free, 등 다수\n",
        "\n",
        "→ 이 변수들은 운임 예측에 기여하지 않음\n",
        "\n",
        "→ **단계적 회귀(stepwise)**를 통해 제거해야 함"
      ],
      "metadata": {
        "id": "vj6Ji2pJ9Sa6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**조건수(Condition Number)**\n",
        "\n",
        ": 조건수는 선형 회귀 모델에서 독립 변수들 사이에 다중공선성이 있는지를 수치로 나타내는 지표\n",
        "\n",
        "| 조건수 값               | 해석                          |\n",
        "| ------------------- | --------------------------- |\n",
        "| **< 30**            | 안정적 (문제 없음) ✅               |\n",
        "| **30 \\~ 100**       | 다소 문제 있음 (주의) ⚠️            |\n",
        "| **> 100**           | **강한 다중공선성** (심각함) ❗        |\n",
        "| **≫ 1e+5 (10⁵ 이상)** | 설계행렬이 거의 특이함 (계산 불가능 수준) 🚨 |\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "**현재 모델의 조건수**\n",
        ": Cond. No. = 5.76e+18\n",
        "\n",
        "=> 매우 크고 비정상적인 값\n",
        "\n",
        "* 해결방안\n",
        "1. 중복, 불필요한 변수 제거\n",
        "2. Variance Inflation Factor (VIF) 확인 (변수별 다중공선성 확인)\n",
        "3. 희소한 가변수(거의 전부 0인 변수) 제거\n",
        "4. 정규화 회귀 사용 : Ridge, Lasso 회귀는 다중공선성에 더 강함\n"
      ],
      "metadata": {
        "id": "TpP62W9w9Sa6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. VIF (분산 팽창 계수) 확인**"
      ],
      "metadata": {
        "id": "nHFkvm-w9Sa6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# 1. X 데이터에 상수항 추가\n",
        "X_const = sm.add_constant(X_train).astype(float)  # ← 여기에 X_train은 학습용 독립변수 DataFrame\n",
        "\n",
        "# 2. VIF 계산\n",
        "vif_data = pd.DataFrame()\n",
        "vif_data[\"변수명\"] = X_const.columns\n",
        "vif_data[\"VIF\"] = [variance_inflation_factor(X_const.values, i) for i in range(X_const.shape[1])]\n",
        "\n",
        "# 3. 결과 출력\n",
        "pd.set_option('display.max_rows', None)  # 생략 없이 전체 출력\n",
        "print(vif_data)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e5a1be11-0047-4759-d532-2418f70d39f4",
        "collapsed": true,
        "id": "lx_21clD9Sa6"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/statsmodels/regression/linear_model.py:1782: RuntimeWarning: divide by zero encountered in scalar divide\n",
            "  return 1 - self.ssr/self.centered_tss\n",
            "/usr/local/lib/python3.11/dist-packages/statsmodels/stats/outliers_influence.py:197: RuntimeWarning: divide by zero encountered in scalar divide\n",
            "  vif = 1. / (1. - r_squared_i)\n",
            "/usr/local/lib/python3.11/dist-packages/statsmodels/regression/linear_model.py:1782: RuntimeWarning: invalid value encountered in scalar divide\n",
            "  return 1 - self.ssr/self.centered_tss\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                               변수명           VIF\n",
            "0                            const  0.000000e+00\n",
            "1                           COUPON  6.342761e+00\n",
            "2                              NEW  1.466033e+00\n",
            "3                               HI  2.656228e+00\n",
            "4                         S_INCOME           inf\n",
            "5                         E_INCOME           inf\n",
            "6                            S_POP           inf\n",
            "7                            E_POP           inf\n",
            "8                         DISTANCE  5.989358e+00\n",
            "9                              PAX  3.720207e+00\n",
            "10                      S_CODE_DCA           inf\n",
            "11                      S_CODE_EWR           inf\n",
            "12                      S_CODE_IAD           inf\n",
            "13                      S_CODE_JFK           inf\n",
            "14                      S_CODE_LGA           inf\n",
            "15                      S_CODE_MDW           inf\n",
            "16                      S_CODE_ORD           inf\n",
            "17   S_CITY_Anchorage           AK           inf\n",
            "18   S_CITY_Atlanta             GA           inf\n",
            "19   S_CITY_Austin              TX  2.251800e+15\n",
            "20   S_CITY_Baltimore/Wash Intl MD  9.007199e+15\n",
            "21   S_CITY_Boise               ID  2.729454e+14\n",
            "22   S_CITY_Boston              MA           inf\n",
            "23   S_CITY_Burbank             CA           inf\n",
            "24   S_CITY_Chicago             IL           inf\n",
            "25   S_CITY_Cincinnati          OH           inf\n",
            "26   S_CITY_Cleveland           OH           inf\n",
            "27   S_CITY_Columbus            OH  2.251800e+15\n",
            "28   S_CITY_Corpus Christi      TX  2.814750e+14\n",
            "29   S_CITY_Dallas/Fort Worth   TX           inf\n",
            "30   S_CITY_Denver              CO           inf\n",
            "31   S_CITY_Detroit             MI           inf\n",
            "32   S_CITY_El Paso             TX           NaN\n",
            "33   S_CITY_Fort Lauderdale     FL  9.007199e+15\n",
            "34   S_CITY_Fort Meyers         FL  4.503600e+15\n",
            "35   S_CITY_Greenville/Sprtnbg  SC  9.790434e+13\n",
            "36   S_CITY_Hartford            CT           inf\n",
            "37   S_CITY_Honolulu (Intl)     HI           inf\n",
            "38   S_CITY_Houston             TX  9.007199e+15\n",
            "39   S_CITY_Jacksonville        FL  8.830588e+13\n",
            "40   S_CITY_Kansas City         MO  9.007199e+15\n",
            "41   S_CITY_Las Vegas           NV  3.002400e+15\n",
            "42   S_CITY_Los Angeles         CA           inf\n",
            "43   S_CITY_Memphis             TN           inf\n",
            "44   S_CITY_Miami               FL           inf\n",
            "45   S_CITY_Minneapolis/St Paul MN  4.503600e+15\n",
            "46   S_CITY_Nashville           TN  1.501200e+15\n",
            "47   S_CITY_New Orleans         LA  1.501200e+15\n",
            "48   S_CITY_New York/Newark     NY           inf\n",
            "49   S_CITY_Norfolk/Va B/Pt/Ch  VA  1.286743e+15\n",
            "50   S_CITY_Oakland             CA  9.007199e+15\n",
            "51   S_CITY_Omaha               NE  8.188363e+14\n",
            "52   S_CITY_Orlando             FL  9.007199e+15\n",
            "53   S_CITY_Philadelphia/Camden PA  9.007199e+15\n",
            "54   S_CITY_Phoenix             AZ  4.503600e+15\n",
            "55   S_CITY_Pittsburgh          PA  4.503600e+15\n",
            "56   S_CITY_Portland            OR           inf\n",
            "57   S_CITY_Sacramento          CA  9.007199e+15\n",
            "58   S_CITY_Salt Lake City      UT  3.002400e+15\n",
            "59   S_CITY_San Diego           CA           inf\n",
            "60   S_CITY_San Francisco       CA           inf\n",
            "61   S_CITY_San Jose            CA           NaN\n",
            "62   S_CITY_Seattle/Tacoma      WA           inf\n",
            "63   S_CITY_Spokane             WA           NaN\n",
            "64   S_CITY_St Louis            MO  2.047091e+14\n",
            "65   S_CITY_Tampa               FL           inf\n",
            "66   S_CITY_Washington          DC           inf\n",
            "67                      E_CODE_DCA           inf\n",
            "68                      E_CODE_EWR           inf\n",
            "69                      E_CODE_IAD           inf\n",
            "70                      E_CODE_JFK           inf\n",
            "71                      E_CODE_LGA           inf\n",
            "72                      E_CODE_MDW           inf\n",
            "73                      E_CODE_ORD           inf\n",
            "74   E_CITY_Baltimore/Wash Intl MD           inf\n",
            "75   E_CITY_Birmingham          AL  1.501200e+15\n",
            "76   E_CITY_Boise               ID  5.629500e+14\n",
            "77   E_CITY_Boston              MA           inf\n",
            "78   E_CITY_Buffalo             NY           NaN\n",
            "79   E_CITY_Charleston          SC  9.007199e+15\n",
            "80   E_CITY_Charlotte           NC  1.501200e+15\n",
            "81   E_CITY_Chicago             IL           inf\n",
            "82   E_CITY_Cincinnati          OH  9.007199e+15\n",
            "83   E_CITY_Cleveland           OH  9.007199e+15\n",
            "84   E_CITY_Colorado Springs    CO  1.000800e+15\n",
            "85   E_CITY_Columbus            OH  3.002400e+15\n",
            "86   E_CITY_Dallas/Fort Worth   TX           inf\n",
            "87   E_CITY_Denver              CO  3.002400e+15\n",
            "88   E_CITY_Detroit             MI           inf\n",
            "89   E_CITY_El Paso             TX           NaN\n",
            "90   E_CITY_Fort Lauderdale     FL           inf\n",
            "91   E_CITY_Fort Meyers         FL           inf\n",
            "92   E_CITY_Greensboro/High Pt  NC  3.002400e+15\n",
            "93   E_CITY_Hartford            CT  2.251800e+15\n",
            "94   E_CITY_Honolulu (Intl)     HI  4.503600e+15\n",
            "95   E_CITY_Houston             TX           inf\n",
            "96   E_CITY_Indianapolis        IN  9.007199e+15\n",
            "97   E_CITY_Jacksonville        FL  9.007199e+15\n",
            "98   E_CITY_Kansas City         MO           inf\n",
            "99   E_CITY_Las Vegas           NV  4.503600e+15\n",
            "100  E_CITY_Little Rock         AR  6.928615e+14\n",
            "101  E_CITY_Los Angeles         CA           inf\n",
            "102  E_CITY_Louisville          KY  1.501200e+15\n",
            "103  E_CITY_Lubbock             TX           NaN\n",
            "104  E_CITY_Memphis             TN           NaN\n",
            "105  E_CITY_Miami               FL           inf\n",
            "106  E_CITY_Milwaukee           WI           inf\n",
            "107  E_CITY_Minneapolis/St Paul MN           inf\n",
            "108  E_CITY_Nashville           TN           inf\n",
            "109  E_CITY_New Orleans         LA           inf\n",
            "110  E_CITY_New York/Newark     NY           inf\n",
            "111  E_CITY_Oakland             CA           inf\n",
            "112  E_CITY_Oklahoma City       OK  2.251800e+15\n",
            "113  E_CITY_Omaha               NE  2.251800e+15\n",
            "114  E_CITY_Orlando             FL           inf\n",
            "115  E_CITY_Philadelphia/Camden PA           inf\n",
            "116  E_CITY_Phoenix             AZ           inf\n",
            "117  E_CITY_Pittsburgh          PA           inf\n",
            "118  E_CITY_Portland            OR           inf\n",
            "119  E_CITY_Providence          RI  9.007199e+15\n",
            "120  E_CITY_Raleigh/Durham      NC           inf\n",
            "121  E_CITY_Reno                NV           inf\n",
            "122  E_CITY_Richmond (Intl)     VA  9.007199e+15\n",
            "123  E_CITY_Rochester           NY           NaN\n",
            "124  E_CITY_Sacramento          CA  3.002400e+15\n",
            "125  E_CITY_Salt Lake City      UT  9.007199e+15\n",
            "126  E_CITY_San Antonio         TX  9.007199e+15\n",
            "127  E_CITY_San Diego           CA           inf\n",
            "128  E_CITY_San Francisco       CA           inf\n",
            "129  E_CITY_San Jose            CA           inf\n",
            "130  E_CITY_Sarasota/Bradenton  FL  9.007199e+15\n",
            "131  E_CITY_Seattle/Tacoma      WA  9.007199e+15\n",
            "132  E_CITY_Spokane             WA           NaN\n",
            "133  E_CITY_St Louis            MO           inf\n",
            "134  E_CITY_Syracuse            NY  1.125900e+15\n",
            "135  E_CITY_Tallahassee         FL           NaN\n",
            "136  E_CITY_Tampa               FL           inf\n",
            "137  E_CITY_Tucson              AZ           NaN\n",
            "138  E_CITY_Tulsa               OK           NaN\n",
            "139  E_CITY_Washington          DC           inf\n",
            "140  E_CITY_West Palm Beach     FL           inf\n",
            "141                   VACATION_Yes  1.940828e+01\n",
            "142                         SW_Yes  3.988784e+00\n",
            "143                      SLOT_Free  3.111076e+01\n",
            "144                      GATE_Free  1.998897e+01\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "| VIF 값       | 의미           | 해석            |\n",
        "| ----------- | ------------ | ------------- |\n",
        "| 1.0 \\~ 5.0  | 보통 수준        | 문제 없음 ✅       |\n",
        "| 5.0 \\~ 10.0 | 다중공선성 가능성 있음 | 주의 ⚠️         |\n",
        "| 10 이상       | 강한 다중공선성 존재  | 제거 또는 결합 필요 ❗ |\n"
      ],
      "metadata": {
        "id": "k6_RVoK69Sa7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**분석 결과**\n",
        " 1. VIF = inf (무한대) or NaN인 변수 다수\n",
        "\n",
        ": S_INCOME, E_POP, S_CODE_DCA, E_CODE_JFK, S_CITY_Chicago, E_CITY_Boston 등\n",
        "\n",
        "| 원인                               | 설명                                                          |\n",
        "| -------------------------------- | ----------------------------------------------------------- |\n",
        "| ✅ **너무 많은 가변수(dummy variables)** | `S_CITY_`, `E_CITY_`, `S_CODE_`, `E_CODE_` 등 수십 개가 들어가 있음   |\n",
        "| ⚠️ **가변수끼리 서로 완전히 중복**           | 예: `S_CODE_JFK`와 `S_CITY_New York/Newark NY`는 거의 항상 함께 True |\n",
        "| ⚠️ **샘플 수 대비 변수 수가 너무 많음**       | 샘플은 446개인데, 변수는 140개 이상 → 수학적으로 해가 불안정                      |\n",
        "| ⚠️ **일부 가변수가 특정 행에서만 1이고 나머지 0** | 희소한 dummy 변수 → OLS 계산에서 문제가 생김                              |\n",
        "\n",
        "**해결 방안**\n",
        "\n",
        "=> 단계적 회귀 (Stepwise Selection)\t자동으로 중요 변수만 남기고 나머지 제거 (p < 0.05 기준)"
      ],
      "metadata": {
        "id": "lBFuscaK9Sa7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "XewL0xBbCB4L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ii. 예측 변수의 수를 줄이기 위해서 단계적 회귀 분석을 사용하시오. 처음 4개의 예측 변수(S_CODE, S_CITY, E_CODE, E_CITY)는 제외해도 무방하다. 선택된 모델을 제시하시오.**\n",
        "\n",
        "**단계적 회귀분석(stepwise regression)**\n",
        "\n",
        " : 많은 잠재 예측 변수 중에서 통계적으로 의미 있는 변수만 골라 모델을 구성하는 자동화된 변수선택 기법\n",
        "\n",
        "- 전진 선택법 (Forward Selection)\n",
        "- 후진 제거법 (Backward Elimination)\n",
        "- 단계적 선택법 (Stepwise Selection)  : 전진 선택 + 후진 제거를 번갈아가며 수행"
      ],
      "metadata": {
        "id": "TvxpteM6hcv_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "ymUcBjG5_GQD"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 불필요한 변수 제거\n",
        "# df_encoded를 사용하지 않는 이유 - \"S_CODE\", \"S_CITY\", \"E_CODE\", \"E_CITY\"의 더미변수 또한 모두 제거 해야함.\n",
        "df = pd.read_csv(\"Airfares.csv\")\n",
        "df = df.drop(columns=[\"S_CODE\", \"S_CITY\", \"E_CODE\", \"E_CITY\"])\n"
      ],
      "metadata": {
        "id": "p-mPBrEDAsjL"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 범주형 변수 -> 가변수 처리\n",
        "categorical_vars = [\"VACATION\", \"SW\", \"SLOT\", \"GATE\"]\n",
        "df = pd.get_dummies(df, columns=categorical_vars, drop_first=True)"
      ],
      "metadata": {
        "id": "P_H9ydA9GiKN"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 모든 bool 컬럼을 1/0 int로 변환\n",
        "bool_cols = df.select_dtypes(include=['bool']).columns\n",
        "df[bool_cols] = df[bool_cols].astype(int)\n"
      ],
      "metadata": {
        "id": "ifUkg9SNL75E"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 독립변수(X)·종속변수(y) 분리  (예측에 사용할 모든 입력 변수인 독립변수에서 FARE 제외)\n",
        "X = df.drop(columns=\"FARE\")\n",
        "y = df[\"FARE\"]"
      ],
      "metadata": {
        "id": "b2ZqnOZSBMxi"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 학습/검증 세트 분할 (70% / 30%)\n",
        "X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "tx-2iej2Grzy"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. 전진 선택법**\n",
        "- 빈 모델(절편만 포함)에서 시작\n",
        "- 남아 있는 후보 변수 중에서 가장 유의미한 변수(예: p-value가 가장 작거나, AIC가 가장 감소)를 하나씩 추가\n",
        "- 더 이상 추가할 변수가 없을 때(모두 p-value > 기준이거나 AIC 감소가 미미할 때) 종료\n",
        "\n",
        "- 장점: 단순하고 빠름\n",
        "- 단점: 이미 들어간 변수가 최종 조합에 방해가 될 수 있음(국소 최적화)"
      ],
      "metadata": {
        "id": "4YZzqQ3yJDTK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. 후진 제거법**\n",
        "- 모든 후보 변수를 포함한 모델에서 시작\n",
        "- 포함된 변수 중에서 가장 유의하지 않은 변수(p-value가 가장 크거나, AIC가 가장 증가)를 하나씩 제거\n",
        "- 더 이상 제거할 변수가 없을 때(모두 p-value < 기준이거나, 제거 시 AIC 악화) 종료\n",
        "\n",
        "- 장점: 최종 모델에는 항상 “유의미한” 변수만 남음\n",
        "- 단점: 초기 모델에 너무 많은 변수가 있으면 계산량이 많아짐"
      ],
      "metadata": {
        "id": "Wm2w5kbNKTuk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''X : pandas.DataFrame, 모든 후보 독립변수들\n",
        "   y : pandas.Series, 종속변수\n",
        "  initial_list : 이미 포함할 변수 리스트 (여기선 빈 리스트로 시작)\n",
        "  threshold_in : forward step에 변수를 추가할 p-value 기준\n",
        "  threshold_out: backward step에 변수를 제거할 p-value 기준'''\n",
        "\n",
        "def stepwise_selection(X, y, initial_list=[], threshold_in=0.01, threshold_out=0.05):\n",
        "    included = list(initial_list) # 지금 모델에 포함된 변수들의 리스트 (절편만 있는 모델로 시작)\n",
        "    while True:\n",
        "        changed = False  # changed: 한 사이클(전진+후진)에서 \"추가 or 제거\"가 발생했는지 표시하는 플래그\n",
        "\n",
        "        # (1) 전진 선택법 forward: 후보 변수 중 p-value < threshold_in 이면 추가\n",
        "        excluded = list(set(X.columns) - set(included))   # 아직 모델에 포함되지 않은 변수들\n",
        "        new_pval = pd.Series(index=excluded, dtype=float)  #  전진 단계에서 각 후보 변수를 한 번씩 추가했을 때의 p-value 저장용 Series.\n",
        "        for col in excluded:   # 후보 변수 하나(col)를 포함시켜 보고 /\n",
        "            model = sm.OLS(y, sm.add_constant(X[included + [col]].astype(float))).fit()  # sm.add_constant() : 절편항(constant) 추가\n",
        "            new_pval[col] = model.pvalues[col]  # 새로 학습한 모델의 p-value 중, 이 변수(col)의 p-value 저장\n",
        "        best_pval = new_pval.min()   # 후보들 중 가장 작은 p-value\n",
        "        if best_pval < threshold_in:   # 기준(threshold_in=0.01)보다 작으면\n",
        "            included.append(new_pval.idxmin())  # p-value가 최소인 변수명을 꺼내고 / included 리스트에 추가\n",
        "            changed = True\n",
        "    # 이로써 \"유의미하게 추가할 변수\"가 있는지 검사하고, 있으면 포함시킨다.\n",
        "\n",
        "\n",
        "        # (2) 후진 선택법 backward: 포함된 변수 중 p-value > threshold_out 이면 제거\n",
        "        model = sm.OLS(y, sm.add_constant(X[included].astype(float))).fit()  # 지금까지 포함된 변수들만으로 모델을 다시 학습\n",
        "        pvals = model.pvalues.iloc[1:]      # 맨 앞 const 항(절편) 제외[0]하고 변수들에 대한 모든 p-value\n",
        "        worst_pval = pvals.max()        # 포함된 변수들 중, p-value가 가장 큰 값\n",
        "        if worst_pval > threshold_out:       # 기준(threshold_out=0.05)보다 크면\n",
        "            included.remove(pvals.idxmax())    # p-value가 최대인 변수명을 꺼내고 / included 리스트에서 제거\n",
        "            changed = True\n",
        "   # 이로써 \"유의하지 않은 변수\"를 걸러낸다\n",
        "\n",
        "        if not changed:    # 전진에서도 추가가 없고, 후진에서도 제거가 없었다면, 종\n",
        "            break\n",
        "    return included        # 최종적으로 남은 '통계적으로 유의미'한 변수 목록 리턴\n"
      ],
      "metadata": {
        "id": "e2uHFq11Kdud"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**p-value 0.01 이하의 변수만 추가했는데, 후진에서 pv 0.05 이상의 변수가 어떻게 삭제되는가?**\n",
        "\n",
        "절편만 있던 모델과 (변수 추가되기 전)\n",
        "\n",
        "절편 + 𝑋𝑘 모델 (전진선택으로 인해 변수 추가된 후)은 아예 다른 회귀식이기에 모델의 잔차 구조가 달라짐.\n",
        "\n",
        "=> 그 변화로 인해:\n",
        "\n",
        "절편만 모델에서 𝑋𝑘를 추가했을 때는 p-value가 아주 낮았더라도,\n",
        "\n",
        "그 모델을 다시 그대로 재평가할 때 (바로 후진 단계 진입 시)\n",
        "→ p-value가 0.05를 넘어설 수 있음."
      ],
      "metadata": {
        "id": "7uwugP80XjN3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stepwise_selection(X, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TAAyymI4UaZV",
        "outputId": "59cf9326-dc3d-4096-8fe9-7ad912762dfd"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['DISTANCE',\n",
              " 'SW_Yes',\n",
              " 'VACATION_Yes',\n",
              " 'HI',\n",
              " 'SLOT_Free',\n",
              " 'GATE_Free',\n",
              " 'E_POP',\n",
              " 'PAX',\n",
              " 'S_POP',\n",
              " 'E_INCOME']"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**단계적 회귀분석 결과**\n",
        "통계적으로 유의미한 10개 핵심 변수\n",
        "\n",
        "- 'DISTANCE'\n",
        "- SW_Yes',\n",
        "- VACATION_Yes'\n",
        "- 'HI'\n",
        "- 'SLOT_Free'\n",
        "- 'GATE_Free'\n",
        "- 'E_POP'\n",
        "- 'PAX'\n",
        "- 'S_POP'\n",
        "- 'E_INCOME'\n",
        "\n"
      ],
      "metadata": {
        "id": "MzpO5mbyVp-I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**표준화 계수(standardized coefficients)**\n",
        "\n",
        "변수마다 단위가 다르면 영향력 비교가 어렵기 때문에, 모든 변수와 타깃을 표준화(평균0, 표준편차1)로 맞춘 후 회귀계수를 구하면 각 변수의 상대적 중요도를 직접 비교.\n",
        "\n",
        "=> 표준화 계수의 절댓값이 클수록 “상대적으로 중요한 변수”로 해석\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "**주의**\n",
        "\n",
        "회귀계수로 비교하지 않은 이유 :\n",
        "회귀계수는 단순히 절댓값이 클수록 “예측에 미치는 영향이 크다”고 판단.\n",
        "단위(스케일)가 달라서 해석에 주의가 필요하기에 표준화 계수를 통해 비교함."
      ],
      "metadata": {
        "id": "slU7Oi4-9UYB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "import statsmodels.api as sm\n",
        "import pandas as pd\n",
        "\n",
        "# 1. 단계적 회귀로 뽑은 10개 변수 리스트 (selected_vars)\n",
        "selected_vars = [\n",
        "    'DISTANCE',\n",
        "    'SW_Yes',\n",
        "    'VACATION_Yes',\n",
        "    'HI',\n",
        "    'SLOT_Free',\n",
        "    'GATE_Free',\n",
        "    'E_POP',\n",
        "    'PAX',\n",
        "    'S_POP',\n",
        "    'E_INCOME'\n",
        "]\n",
        "\n",
        "# 2. X, y 표준화\n",
        "scaler_X = StandardScaler()\n",
        "scaler_y = StandardScaler()\n",
        "X_train_sel = X_train[selected_vars]                # 선택 변수만 추출\n",
        "X_train_std = scaler_X.fit_transform(X_train_sel)   # 표준화\n",
        "y_train_std = scaler_y.fit_transform(y_train.values.reshape(-1,1)).flatten()\n",
        "\n",
        "# 3. 절편 추가\n",
        "X_train_std_const = sm.add_constant(X_train_std)\n",
        "\n",
        "# 4. 회귀 분석\n",
        "model_std = sm.OLS(y_train_std, X_train_std_const).fit()\n",
        "\n",
        "# 5. 표준화 계수 정리\n",
        "std_coef_df = pd.DataFrame({\n",
        "    'std_coef': model_std.params[1:]  # [1:]로 절편(const) 제외\n",
        "}, index=selected_vars).sort_values(by='std_coef', key=abs, ascending=False)\n",
        "\n",
        "print(std_coef_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N6hz6kFz8za8",
        "outputId": "2ef32ff2-42ba-4ee7-f310-3861341f0039"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              std_coef\n",
            "DISTANCE      0.652678\n",
            "SW_Yes       -0.250286\n",
            "VACATION_Yes -0.231813\n",
            "HI            0.205627\n",
            "S_POP         0.168581\n",
            "PAX          -0.155037\n",
            "E_POP         0.142410\n",
            "GATE_Free    -0.124639\n",
            "SLOT_Free    -0.115979\n",
            "E_INCOME      0.073394\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**분석 결과**\n",
        "\n",
        "| 변수            |  표준화 계수 |          영향          |\n",
        "| ------------- | :-----: | :------------------: |\n",
        "| DISTANCE      |  0.6527 | **가장 영향력 큼 (양의 영향)** |\n",
        "| SW\\_Yes       | -0.2503 |       강한 음의 영향       |\n",
        "| VACATION\\_Yes | -0.2318 |       강한 음의 영향       |\n",
        "| HI            |  0.2056 |      중간 정도 양의 영향     |\n",
        "| S\\_POP        |  0.1686 |      중간 정도 양의 영향     |\n",
        "| PAX           | -0.1550 |      중간 정도 음의 영향     |\n",
        "| E\\_POP        |  0.1424 |       약간 양의 영향       |\n",
        "| GATE\\_Free    | -0.1246 |       약간 음의 영향       |\n",
        "| SLOT\\_Free    | -0.1160 |       약간 음의 영향       |\n",
        "| E\\_INCOME     |  0.0734 |     영향 작음 (양의 영향)    |\n",
        "\n"
      ],
      "metadata": {
        "id": "xGBQAxwJ-KOI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**단계적 회귀분석 모델 설명력 확인 - 수정된 결정계수(Adjusted R²)**"
      ],
      "metadata": {
        "id": "E3nT0b1SFaR4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "\n",
        "# 1. stepwise_selection() 결과로 선택된 변수\n",
        "selected_vars = ['DISTANCE', 'SW_Yes', 'VACATION_Yes', 'HI', 'SLOT_Free', 'GATE_Free', 'E_POP', 'PAX', 'S_POP', 'E_INCOME']\n",
        "\n",
        "# 2. 데이터 준비 (train 기준)\n",
        "X_train_sel = X_train[selected_vars]\n",
        "X_train_sel_const = sm.add_constant(X_train_sel)  # 절편 추가\n",
        "\n",
        "# 3. 회귀 모델 적합\n",
        "model_stepwise = sm.OLS(y_train, X_train_sel_const).fit()\n",
        "\n",
        "# 4. 설명력(결정계수 등) 확인\n",
        "print(\"R²: \", model_stepwise.rsquared)\n",
        "print(\"Adjusted R²: \", model_stepwise.rsquared_adj)\n",
        "print(model_stepwise.summary())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X5wY9sXgFg4g",
        "outputId": "12efaafb-1985-44ec-83f2-16d4b99fa89b"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R²:  0.7779942245111641\n",
            "Adjusted R²:  0.7728906434654437\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                   FARE   R-squared:                       0.778\n",
            "Model:                            OLS   Adj. R-squared:                  0.773\n",
            "Method:                 Least Squares   F-statistic:                     152.4\n",
            "Date:                Mon, 09 Jun 2025   Prob (F-statistic):          2.45e-135\n",
            "Time:                        14:37:04   Log-Likelihood:                -2222.3\n",
            "No. Observations:                 446   AIC:                             4467.\n",
            "Df Residuals:                     435   BIC:                             4512.\n",
            "Df Model:                          10                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "================================================================================\n",
            "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
            "--------------------------------------------------------------------------------\n",
            "const           49.8503     15.954      3.125      0.002      18.493      81.207\n",
            "DISTANCE         0.0762      0.003     25.106      0.000       0.070       0.082\n",
            "SW_Yes         -41.0792      4.296     -9.563      0.000     -49.522     -32.636\n",
            "VACATION_Yes   -39.1630      4.290     -9.129      0.000     -47.595     -30.731\n",
            "HI               0.0089      0.001      7.693      0.000       0.007       0.011\n",
            "SLOT_Free      -19.4429      4.488     -4.333      0.000     -28.263     -10.623\n",
            "GATE_Free      -23.6695      4.860     -4.870      0.000     -33.222     -14.117\n",
            "E_POP           3.9e-06   8.64e-07      4.515      0.000     2.2e-06     5.6e-06\n",
            "PAX             -0.0009      0.000     -5.547      0.000      -0.001      -0.001\n",
            "S_POP         4.198e-06   7.74e-07      5.423      0.000    2.68e-06    5.72e-06\n",
            "E_INCOME         0.0012      0.000      2.738      0.006       0.000       0.002\n",
            "==============================================================================\n",
            "Omnibus:                        1.657   Durbin-Watson:                   1.824\n",
            "Prob(Omnibus):                  0.437   Jarque-Bera (JB):                1.523\n",
            "Skew:                           0.141   Prob(JB):                        0.467\n",
            "Kurtosis:                       3.050   Cond. No.                     5.81e+07\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 5.81e+07. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**단계적 회귀 분석 모델 설명력 결과**\n",
        "\n",
        "변수 10개가 포함된 단계적 회귀 분석 모델의 설명력\n",
        "\n",
        "**R²:  0.778**\n",
        "- 모델이 데이터를 얼마나 잘 설명하는가?”\n",
        "- 쓸데없는 변수 추가해도 R²는 무조건 커짐.\n",
        "\n",
        "**Adjusted R²: 0.773**\n",
        "- 변수의 개수(모델 복잡도)를 감안해서, “실질적으로 설명하는 비율”\n",
        "- 변수 개수가 늘어날수록 벌점(Penalty)이 생김\n",
        "- 진짜로 유의미한 변수만 추가했을 때만 올라감\n",
        "\n",
        "\n",
        "=> 과적합(overfitting) 방지에 더 신뢰할 수 있음!"
      ],
      "metadata": {
        "id": "ajTXmcQgMlQr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " iii. 단계적 회귀 분석 대신 전역 탐색을 사용해 (ii)를 반복하시오. 이를 통해 얻은 최적 모델의 예측 변수들과 (ii)에서 얻은 최적 모델의 예측 변수들을 비교하시오.\n"
      ],
      "metadata": {
        "id": "wbZVmRPlh0ad"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**전역탐색**\n",
        ": 모든 변수 조합을 하나도 빠짐없이 전부 비교\n",
        "- 각 조합으로 회귀모델을 만들고, 그 모델의 성능(설명력, 조정 R², AIC/BIC 등)을 측정\n",
        "- 가장 좋은 성능을 보이는 조합을 “최적 모델”로 선택\n",
        "- 변수 수가 적으면 매우 정확함"
      ],
      "metadata": {
        "id": "8x323FZy5Ya1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import itertools\n",
        "import statsmodels.api as sm\n",
        "import numpy as np\n",
        "\n",
        "# 후보 변수 리스트 (불필요한 변수는 위에서 미리 제거)\n",
        "candidates = list(X_train.columns)  # 총 13개 독립 변수\n",
        "\n",
        "best_adj_r2 = -np.inf  # 지금까지 찾은 최고 성능(조정된 결정계수)를 저장할 변수 / -np.inf“가장 작은 값”이라는 뜻(최댓값 찾을 때 초기값으로 자주 씀).\n",
        "best_subset = None     # 최고 성능 모델의 변수 조합을 저장할 변수\n",
        "best_model = None      # 최고 성능 모델 객체 자체를 저장할 변수\n",
        "\n",
        "# 변수 개수별 부분집합 생성(실전에서는 1~10개 정도까지만 권장)\n",
        "for k in range(1, len(candidates)+1):\n",
        "    for combo in itertools.combinations(candidates, k):    # 주어진 리스트에서 k개를 뽑는 모든 조합을 자동으로 만듦.\n",
        "        X_sub = sm.add_constant(X_train[list(combo)].astype(float))   # combo : 현재 변수 조합에 해당하는 열만 뽑은 DataFrame / 절편 추가\n",
        "        model = sm.OLS(y_train, X_sub).fit()   # OLS(최소제곱회귀)로 현재 변수 조합을 사용해서 회귀모델 학습\n",
        "        if model.rsquared_adj > best_adj_r2:   # 방금 학습한 모델의 조정된 결정계수(Adjusted R²) 가\n",
        "            best_adj_r2 = model.rsquared_adj   # 지금까지 중에 최고면, 값을 “최고 기록”으로 업데이트.\n",
        "            best_subset = combo\n",
        "            best_model = model\n",
        "\n",
        "print(\"▶ Best Subset Variables:\", best_subset)\n",
        "print(\"▶ Best Adjusted R²:\", best_adj_r2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5N7KrUEA58fY",
        "outputId": "9851971f-b492-4ea9-ba5f-b939ad009218"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "▶ Best Subset Variables: ('NEW', 'HI', 'S_INCOME', 'E_INCOME', 'S_POP', 'E_POP', 'DISTANCE', 'PAX', 'VACATION_Yes', 'SW_Yes', 'SLOT_Free', 'GATE_Free')\n",
            "▶ Best Adjusted R²: 0.7737804371209807\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**분석 결과**\n",
        "\n",
        "**최적 변수 조합 (Best Subset Variables)**\n",
        "- ('NEW', 'HI', 'S_INCOME', 'E_INCOME', 'S_POP', 'E_POP', 'DISTANCE', 'PAX', 'VACATION_Yes', 'SW_Yes', 'SLOT_Free', 'GATE_Free')\n",
        "\n",
        "=> 'COUPON' 변수를 제외한 나머지 12개 조합\n",
        "\n",
        "**Adjusted R(조정된 결정계수)**\n",
        "\n",
        "**: 0.7738**\n",
        "\n",
        "=> 전역탐색을 이용한 회귀모델이 전체 운임 변동을 77% 이상 설명할 수 있음"
      ],
      "metadata": {
        "id": "8VfpGpp3DjXA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Adjusted R²(조정된 결정계수) 비교**\n",
        "- 단계적 회귀 분석 모델 : 0.773   (변수 10개)\n",
        "- 전역탐색 : 0.7738   (변수 12개)\n",
        "\n",
        "**=> 전역탐색을 통한 모델의 설명력이 미세하게 높음.**"
      ],
      "metadata": {
        "id": "esATU0RNQcJr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "EeQaI5ZPPfti"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**iv. RMSE, 평균 오차, 리프트 차트와 같은 측도들을 사용해 모델 (ii)와 (iii)에 대한 예측 정확도를 비교하시오.**"
      ],
      "metadata": {
        "id": "aJVa7jL8h3bD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**예측 정확도 지표 계산**\n",
        "\n",
        "**1. RMSE (Root Mean Squared Error)**\n",
        "- 실제값과 예측값 차이(오차)의 제곱평균의 제곱근\n",
        "- **작을수록** 예측이 정확함\n",
        "\n",
        "**2. MAE (Mean Absolute Error) / 평균 오차**\n",
        "- 오차(실제-예측)의 절대값 평균\n",
        "- **작을수록** 좋음\n",
        "\n",
        "**3. 리프트 차트(Lift Chart)**\n",
        "- 예측값을 높은 순서대로 정렬해서,“예측값이 높은 구간에서 실제값도 높은가?” 시각화\n",
        "- 실전에서는 주로 “상위 10%~20%”를 얼마나 잘 찾아내는지 볼 때 활용\n",
        "- 회귀 리프트차트가 더 **우하향**인 모델이 더 좋은 모델"
      ],
      "metadata": {
        "id": "AMreeq3IQfCJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 예측 정확도 지표 계산을 위한 단계적 회귀분석 변수 생성\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# 1. stepwise_selection 함수로 이미 'selected_vars' 리스트가 정의되어 있다고 가정\n",
        "# (예시: selected_vars = ['DISTANCE', 'SW_Yes', 'VACATION_Yes', ...])\n",
        "\n",
        "# 2. 검증용 데이터에서 선택된 변수만 추출\n",
        "X_valid_stepwise = X_valid[selected_vars]          # 검증 데이터에서 필요한 변수만\n",
        "X_valid_stepwise_const = sm.add_constant(X_valid_stepwise)  # 절편 추가\n",
        "\n",
        "# 3. 예측\n",
        "y_pred_stepwise = model_stepwise.predict(X_valid_stepwise_const)"
      ],
      "metadata": {
        "id": "G7R0I5tlTVNU"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 예측 정확도 지표 계산을 위한 전역탐색 변수 생성\n",
        "# 1. 검증세트에서 전역탐색으로 뽑힌 변수만 추출\n",
        "X_valid_best = X_valid[list(best_subset)]\n",
        "X_valid_best_const = sm.add_constant(X_valid_best)\n",
        "\n",
        "# 2. 예측 (이미 best_model은 최적 모델 객체임)\n",
        "y_pred_best = best_model.predict(X_valid_best_const)\n",
        "\n"
      ],
      "metadata": {
        "id": "QQ1DH28pTl7L"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# (1) 예측\n",
        "# 각각 단계적 회귀분석/전역탐색 모델에서 검증용 데이터셋으로 예측값 생성\n",
        "y_pred_stepwise = model_stepwise.predict(X_valid_stepwise_const)\n",
        "y_pred_best = best_model.predict(X_valid_best_const)\n",
        "\n",
        "# (2) 평가지표\n",
        "def rmse(y_true, y_pred):                           # 실제값과 예측값의 차이를 제곱해서 평균낸 뒤, 다시 루트(제곱근)\n",
        "    return np.sqrt(np.mean((y_true - y_pred)**2))   # 오차가 클수록 더 불리하게 반영\n",
        "\n",
        "def mae(y_true, y_pred):\n",
        "    return np.mean(np.abs(y_true - y_pred))         # 실제-예측 오차의 절댓값의 평균 (직관적으로 평균 오차 크기)\n",
        "\n",
        "# 함수 실행 : 검증 데이터(y_valid)와 예측값을 비교해 RMSE, MAE 계산\n",
        "rmse_stepwise = rmse(y_valid, y_pred_stepwise)\n",
        "rmse_best = rmse(y_valid, y_pred_best)\n",
        "\n",
        "mae_stepwise = mae(y_valid, y_pred_stepwise)\n",
        "mae_best = mae(y_valid, y_pred_best)\n",
        "\n",
        "print(\"Stepwise - RMSE:\", rmse_stepwise, \"/ MAE:\", mae_stepwise)\n",
        "print(\"BestSubset - RMSE:\", rmse_best, \"/ MAE:\", mae_best)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "brBTBVrPRBc3",
        "outputId": "4c411605-abc8-4c20-8531-16d295081139"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stepwise - RMSE: 35.48410754454459 / MAE: 27.036426830572207\n",
            "BestSubset - RMSE: 35.30185126344144 / MAE: 27.0298570123547\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# (3) 리프트 차트\n",
        "def plot_lift_chart(y_true, y_pred, label):\n",
        "    df = pd.DataFrame({'true': y_true, 'pred': y_pred}).sort_values('pred', ascending=False)  # 실제값과 예측값으로 데이터프레임 생성 / 예측값 높은 순으로 정렬 (상위 그룹 먼저)\n",
        "    df['quantile'] = pd.qcut(df.index, 10, labels=False)    # index 기준으로 10등분(분위)로 구간화 (0~9) ex) 1분위 : 예측 운임이 높은 구간\n",
        "    lift = df.groupby('quantile')['true'].mean()            # 각 분위별로 실제값의 평균을 구함\n",
        "    plt.plot(range(1, 11), lift, marker='o', label=label)   # 10구간별 실제값 평균을 선으로 그림 (모델별)\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "plot_lift_chart(y_valid, y_pred_stepwise, 'Stepwise')\n",
        "plot_lift_chart(y_valid, y_pred_best, 'Best Subset')\n",
        "plt.xlabel('Quantile (분위)')\n",
        "plt.ylabel('평균 실제 운임')\n",
        "plt.title('Lift Chart: 예측값 기준 상위구간별 실제 운임')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "H0zh7QzCV235",
        "outputId": "a6f6619c-767a-4812-b424-d12eba5a8a5b"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54217 (\\N{HANGUL SYLLABLE PYEONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44512 (\\N{HANGUL SYLLABLE GYUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49892 (\\N{HANGUL SYLLABLE SIL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51228 (\\N{HANGUL SYLLABLE JE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50868 (\\N{HANGUL SYLLABLE UN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51076 (\\N{HANGUL SYLLABLE IM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50696 (\\N{HANGUL SYLLABLE YE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52769 (\\N{HANGUL SYLLABLE CEUG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44050 (\\N{HANGUL SYLLABLE GABS}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51456 (\\N{HANGUL SYLLABLE JUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50948 (\\N{HANGUL SYLLABLE WI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44396 (\\N{HANGUL SYLLABLE GU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44036 (\\N{HANGUL SYLLABLE GAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48324 (\\N{HANGUL SYLLABLE BYEOL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48516 (\\N{HANGUL SYLLABLE BUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "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fcMxxcbGkpOTQ0lJCadPn+7QqO6CBQv461//yqJFizhw4AD5+fmsWrWKl1566arXTJw4kfr6eg4cOHDDMV5PdnY2vr6+pKamOrxvEemelNyKiHRAYmIiO3fuJD4+nmnTphETE8O9995LUlISW7dupUePHm3nvvPOO/Tr14+77rqLX/3qV8ydO7fdXNYHH3yQOXPmMGvWLEaNGsW2bduYP3/+Dcc0d+5cPD09GTJkCBERERw9evS610yePJnMzEy++eYbxowZw7hx43jvvfeIiYm56jXh4eH84he/cMpmC5999hnp6elXnOsrInIzDNuN1K4REZE2L7/8Mu+++y7r169n3LhxZofjVP/5z3+YNGkSRUVF9OjRg7S0NN58801iY2Pbnbdw4cK230V2djYLFy5s115SUsK8efNYtWoVp0+fZuDAgezatYu4uDgX/SQi4u40cisicpMWLVpERkYG2dnZnV7o1dWNGDGCt956i+LiYof1WVJSwpIlS5TYiohDaeRWRERu2Isvvsi6deuu2PbBBx8A8PTTT1+xffLkydfcNEJEpDOU3IqIiIiI29C0BBERERFxG0puRURERMRtKLkVEREREbeh5FZERERE3IaSWxERERFxG0puRURERMRtKLkVEREREbeh5FZERERE3Mb/B7toZKcct9hrAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**예측 정확도 분석 결과**\n",
        "\n",
        "**- RMSE, MAE**\n",
        "\n",
        "|            | RMSE(평균제곱근오차) | MAE(평균절대오차) |\n",
        "| ---------- | :-----------: | :---------: |\n",
        "| 단계적 회귀분석   |     35.48     |    27.04    |\n",
        "| 전역탐색(부분집합) |     35.30     |    27.03    |\n",
        "\n",
        "- 둘 다 예측 정확도가 유사하므로,\n",
        "변수 개수, 해석의 편의성을 고려해 더 간단한 모델을 선택해도 무방.\n",
        "\n",
        "- 단계적 회귀, 전역탐색 모두 RMSE/MAE 차이가 거의 없다. 즉, 전역탐색으로 변수를 더 추가해도 R²가 거의 안 올랐기에, 이미 소수의 주요변수가 설명력이 집중되어 있다는 것을 알 수 있음. ex) DISTANCE, SW_YES\n"
      ],
      "metadata": {
        "id": "OwtlXAD5XlrU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**- Lift Chart**\n",
        "\n",
        "**- Stepwise, Best Subset 두 모델의 선이 거의 겹침**\n",
        "\n",
        "=> 두 모델의 예측력이 사실상 거의 같다는 의미\n",
        "\n",
        "=> 즉, 선택된 변수 조합이 다소 달라도 실제 예측 결과는 비슷하게 나옴\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "**- 선이 요동치는 이유**\n",
        "\n",
        ": 예측값이 높은 구간에서도 실제값이 낮은 구간이 있고,\n",
        "예측값이 낮은 구간에서도 실제값이 높은 때가 있음.\n",
        "\n",
        "=> 모델이“예측값이 높을수록 실제값도 높다”는 패턴을 일관성 있게 잡지 못함.\n",
        "\n",
        "원인 :\n",
        "- 모델 자체의 한계\n",
        "- 주요 변수만으로 설명이 충분하지 않음 등\n",
        "\n"
      ],
      "metadata": {
        "id": "LxFC-becZ05g"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**v. 모델(iii)을 사용해 다음과 같은 특징을 가진 노선의 평균 운임을 예측하시오.\n",
        "COUPON=1.202, NEW=3, Vacation=No, SW= No, Hi=4442.141, S_INCOME= \\$28760, E_INCOME= \\$27644, S_POP=4557004, E_POP=3195503, SLOT=Free, GATE=Free, PAX=12782, DISTANCE=1976 miles**"
      ],
      "metadata": {
        "id": "L8BtPFPHIgU9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 새로운 노선 데이터 생성\n",
        "new_route = pd.DataFrame({\n",
        " 'COUPON': [1.202],\n",
        " 'NEW': [3],\n",
        " 'HI': [4442.141],\n",
        " 'S_INCOME': [28760],\n",
        " 'E_INCOME': [27644],\n",
        "  'S_POP': [4557004],\n",
        " 'E_POP': [3195503],\n",
        " 'PAX': [12782],\n",
        " 'DISTANCE': [1976]\n",
        "})\n",
        "\n",
        "# 범주형 변수 추가\n",
        "new_route['VACATION_Yes'] = 0 # VACATION = No\n",
        "new_route['SW_Yes'] = 0 # SW = No\n",
        "new_route['SLOT_Free'] = 1 # SLOT = Free\n",
        "new_route['GATE_Free'] = 1 # GATE = Free\n",
        "new_route"
      ],
      "metadata": {
        "id": "KV7LfO5IPRYV",
        "outputId": "cbcdf496-6be6-4fb8-88bd-1d77f0d77493",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        }
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   COUPON  NEW        HI  S_INCOME  E_INCOME    S_POP    E_POP    PAX  \\\n",
              "0   1.202    3  4442.141     28760     27644  4557004  3195503  12782   \n",
              "\n",
              "   DISTANCE  VACATION_Yes  SW_Yes  SLOT_Free  GATE_Free  \n",
              "0      1976             0       0          1          1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b51a51ff-b479-4e80-bd8e-ef6d66a55e47\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>COUPON</th>\n",
              "      <th>NEW</th>\n",
              "      <th>HI</th>\n",
              "      <th>S_INCOME</th>\n",
              "      <th>E_INCOME</th>\n",
              "      <th>S_POP</th>\n",
              "      <th>E_POP</th>\n",
              "      <th>PAX</th>\n",
              "      <th>DISTANCE</th>\n",
              "      <th>VACATION_Yes</th>\n",
              "      <th>SW_Yes</th>\n",
              "      <th>SLOT_Free</th>\n",
              "      <th>GATE_Free</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.202</td>\n",
              "      <td>3</td>\n",
              "      <td>4442.141</td>\n",
              "      <td>28760</td>\n",
              "      <td>27644</td>\n",
              "      <td>4557004</td>\n",
              "      <td>3195503</td>\n",
              "      <td>12782</td>\n",
              "      <td>1976</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b51a51ff-b479-4e80-bd8e-ef6d66a55e47')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b51a51ff-b479-4e80-bd8e-ef6d66a55e47 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b51a51ff-b479-4e80-bd8e-ef6d66a55e47');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_ff669b49-75da-4896-821b-2dc55b4ea07b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_route')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ff669b49-75da-4896-821b-2dc55b4ea07b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_route');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_route",
              "summary": "{\n  \"name\": \"new_route\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"COUPON\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.202,\n        \"max\": 1.202,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.202\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NEW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4442.141,\n        \"max\": 4442.141,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4442.141\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S_INCOME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 28760,\n        \"max\": 28760,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          28760\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E_INCOME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 27644,\n        \"max\": 27644,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          27644\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S_POP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4557004,\n        \"max\": 4557004,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4557004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E_POP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3195503,\n        \"max\": 3195503,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3195503\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PAX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 12782,\n        \"max\": 12782,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          12782\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DISTANCE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1976,\n        \"max\": 1976,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1976\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VACATION_Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SW_Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SLOT_Free\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GATE_Free\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 전역 탐색으로 최종 모델 학습할 때 사용한 데이터와 같은 형태 맞춤\n",
        "new_route_sub = sm.add_constant(new_route[list(best_subset)].astype(float), has_constant='add')\n",
        "new_route_sub"
      ],
      "metadata": {
        "id": "79b1z2PX2FQE",
        "outputId": "a94d9223-1381-4c59-90c5-1d2ae178c067",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        }
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   const  NEW        HI  S_INCOME  E_INCOME      S_POP      E_POP  DISTANCE  \\\n",
              "0    1.0  3.0  4442.141   28760.0   27644.0  4557004.0  3195503.0    1976.0   \n",
              "\n",
              "       PAX  VACATION_Yes  SW_Yes  SLOT_Free  GATE_Free  \n",
              "0  12782.0           0.0     0.0        1.0        1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3012fac1-b399-4b05-9664-0da5897da3db\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>const</th>\n",
              "      <th>NEW</th>\n",
              "      <th>HI</th>\n",
              "      <th>S_INCOME</th>\n",
              "      <th>E_INCOME</th>\n",
              "      <th>S_POP</th>\n",
              "      <th>E_POP</th>\n",
              "      <th>DISTANCE</th>\n",
              "      <th>PAX</th>\n",
              "      <th>VACATION_Yes</th>\n",
              "      <th>SW_Yes</th>\n",
              "      <th>SLOT_Free</th>\n",
              "      <th>GATE_Free</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4442.141</td>\n",
              "      <td>28760.0</td>\n",
              "      <td>27644.0</td>\n",
              "      <td>4557004.0</td>\n",
              "      <td>3195503.0</td>\n",
              "      <td>1976.0</td>\n",
              "      <td>12782.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3012fac1-b399-4b05-9664-0da5897da3db')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3012fac1-b399-4b05-9664-0da5897da3db button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3012fac1-b399-4b05-9664-0da5897da3db');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_ab951a7f-f8b4-4e25-bdd0-967e45be9980\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_route_sub')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ab951a7f-f8b4-4e25-bdd0-967e45be9980 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_route_sub');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_route_sub",
              "summary": "{\n  \"name\": \"new_route_sub\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"const\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NEW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4442.141,\n        \"max\": 4442.141,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4442.141\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S_INCOME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 28760.0,\n        \"max\": 28760.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          28760.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E_INCOME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 27644.0,\n        \"max\": 27644.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          27644.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S_POP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4557004.0,\n        \"max\": 4557004.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4557004.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E_POP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3195503.0,\n        \"max\": 3195503.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3195503.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DISTANCE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1976.0,\n        \"max\": 1976.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1976.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PAX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 12782.0,\n        \"max\": 12782.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          12782.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VACATION_Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SW_Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SLOT_Free\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GATE_Free\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# (iii)에서 얻은 모델 예측에 사용, SW 값을 No로 설정\n",
        "new_route_sub['SW_Yes'] = 0\n",
        "predicted_y = best_model.predict(new_route_sub).values[0]\n",
        "print(\"예측값:\", predicted_y)"
      ],
      "metadata": {
        "id": "vZhizviQYnaK",
        "outputId": "96a3b45e-b032-445e-9f8c-a72ffa59a110",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "예측값: 249.3728556020435\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**vi. (v)에서 사우스웨스트가 이 노선을 운행한다고 결정할 경우, 이 노선의 평균 운임 감소율을 예측하시오(모델(iii)을 사용하시오).**"
      ],
      "metadata": {
        "id": "XUVr6S5eNlSO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# SW 값을 Yes로 바꾼 상태에서 예측 수행\n",
        "new_route_sub['SW_Yes'] = 1\n",
        "predicted_y_sw = best_model.predict(new_route_sub).values[0]\n",
        "print(\"예측값:\", predicted_y_sw)\n",
        "\n",
        "decrease_pct = (predicted_y - predicted_y_sw) / predicted_y * 100\n",
        "print(f\"SW로 인한 운임 감소율: {decrease_pct:.2f}%\")"
      ],
      "metadata": {
        "id": "BQf4ONCS6g0n",
        "outputId": "551c8f43-e8c8-4cfe-d884-3c118146fb1e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "예측값: 209.56721899558178\n",
            "SW로 인한 운임 감소율: 15.96%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- SW 값이 No일 때 운임 예측값: 249.37\n",
        "- SW 값이 Yes일 때 운임 예측값: 209.57\n",
        "\n",
        "운임 감소율: 15.96%"
      ],
      "metadata": {
        "id": "m3bZEhFlK2Tb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**vii. (노선에 항공편을 운행하기 전에) 신공항의 평균 운임을 예측하는 데 현실적으로 사용할 수 없는 요인에는 어떤 것들이 있는가? 어떤 요인들을 추정할 수 있고 어떻게 하면되는가?**"
      ],
      "metadata": {
        "id": "6QXy_eaoN2E-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- 현실적으로 사용할 수 없는 요인\n",
        "\n",
        "(노선에 항공편을 운행하기 전에) 신공항의 평균 운임을 예측하는 데 현실적으로 사용할 수 없는 요인에는 승객수, 사우스웨스트항공사가 해당 노선을 실제로 운행하는지 여부, 휴양지 노선 여부가 있다.\n",
        "\n",
        "승객 수는 아직 노선이 운행하기 전이므로, 측정할 수가 없다.\n",
        "\n",
        "특정 항공사(사우스웨스트항공사)가 해당 노선을 실제로 운행할지 여부 역시 사전에 알기 어렵다.\n",
        "\n",
        "휴양지 노선 여부는 그 기준이 주관적이고,  사후판단일 가능성이 있다.\n",
        "\n",
        "- 추정할 수 있는 방법\n",
        "\n",
        "승객 수는 다른 유사한 노선을 통해 예측할 수 있다.\n",
        "\n",
        "특정항공사(사우스웨스트항공사)가 해당 노선을 실제로 운행할지 여부는 특정 항공사가 운행하는 노선의 공통점을 파악하거나 보유한 비행기 종류로 예측할 수 있다.\n",
        "\n",
        "휴양지 노선 여부는 휴양지 노선으로 이미 정해진 노선의 특징을 노선과 비교해보면서 예측할 수 있다."
      ],
      "metadata": {
        "id": "wWTLDzh88CGc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**viii. 새로운 노선에 운행이 개시되기 전에 사용될 수 있는 요인들만 포함한 모델을 선택하시오. 전역 탐색 방법을 사용하시오.**"
      ],
      "metadata": {
        "id": "JH_c-PRqUTDD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# (III)에서 사용한 전역 탐색 코드 사용\n",
        "candidates = list(X_train.columns)  # 총 13개 독립 변수\n",
        "\n",
        "# (vii)에서 결정한 변수들 제거\n",
        "candidates.remove('VACATION_Yes')\n",
        "candidates.remove('SW_Yes')\n",
        "candidates.remove('PAX')\n",
        "\n",
        "best_adj_r2 = -np.inf  # 지금까지 찾은 최고 성능(조정된 결정계수)를 저장할 변수 / -np.inf“가장 작은 값”이라는 뜻(최댓값 찾을 때 초기값으로 자주 씀).\n",
        "best_subset_new = None     # 최고 성능 모델의 변수 조합을 저장할 변수\n",
        "best_model_new = None      # 최고 성능 모델 객체 자체를 저장할 변수\n",
        "\n",
        "# 변수 개수별 부분집합 생성(실전에서는 1~10개 정도까지만 권장)\n",
        "for k in range(1, len(candidates)+1):\n",
        "    for combo in itertools.combinations(candidates, k):    # 주어진 리스트에서 k개를 뽑는 모든 조합을 자동으로 만듦.\n",
        "        X_sub = sm.add_constant(X_train[list(combo)].astype(float))   # combo : 현재 변수 조합에 해당하는 열만 뽑은 DataFrame / 절편 추가\n",
        "        model = sm.OLS(y_train, X_sub).fit()   # OLS(최소제곱회귀)로 현재 변수 조합을 사용해서 회귀모델 학습\n",
        "        if model.rsquared_adj > best_adj_r2:   # 방금 학습한 모델의 조정된 결정계수(Adjusted R²) 가\n",
        "            best_adj_r2 = model.rsquared_adj   # 지금까지 중에 최고면, 값을 “최고 기록”으로 업데이트.\n",
        "            best_subset_new = combo\n",
        "            best_model_new = model\n",
        "\n",
        "print(\"▶ Best Subset Variables:\", best_subset_new)\n",
        "print(\"▶ Best Adjusted R²:\", best_adj_r2)\n"
      ],
      "metadata": {
        "id": "Xod5KzuM8AZe",
        "outputId": "ff780bec-0015-495c-ea5d-127d23b566cf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "▶ Best Subset Variables: ('COUPON', 'HI', 'S_INCOME', 'E_INCOME', 'S_POP', 'E_POP', 'DISTANCE', 'SLOT_Free', 'GATE_Free')\n",
            "▶ Best Adjusted R²: 0.679427456728809\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ix. 모델(viii)를 사용해 다음 특징을 가진 노선의 평균 운임을 예측하시오.\n",
        "COUPON=1.202, NEW=3, Vacation=No, SW= No, Hi=4442.141, S_INCOME= \\$28760, E_INCOME= \\$27644, S_POP=4557004, E_POP=3195503, SLOT=Free, GATE=Free, PAX=12782, DISTANCE=1976 miles**"
      ],
      "metadata": {
        "id": "NY5N9zpsOImL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 모델 (viii)의 학습 데이터의 형식에 맞게 new_route_new 정의\n",
        "new_route_new = sm.add_constant(new_route[list(best_subset_new)].astype(float), has_constant='add')\n",
        "new_route_new"
      ],
      "metadata": {
        "id": "U-0hIJBpIcOp",
        "outputId": "d78e0cf0-b8c8-47e1-ad8c-77e103514faa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        }
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   const  COUPON        HI  S_INCOME  E_INCOME      S_POP      E_POP  \\\n",
              "0    1.0   1.202  4442.141   28760.0   27644.0  4557004.0  3195503.0   \n",
              "\n",
              "   DISTANCE  SLOT_Free  GATE_Free  \n",
              "0    1976.0        1.0        1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26d1cfd0-a400-4a2c-ab46-e3f9ad6ba494\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>const</th>\n",
              "      <th>COUPON</th>\n",
              "      <th>HI</th>\n",
              "      <th>S_INCOME</th>\n",
              "      <th>E_INCOME</th>\n",
              "      <th>S_POP</th>\n",
              "      <th>E_POP</th>\n",
              "      <th>DISTANCE</th>\n",
              "      <th>SLOT_Free</th>\n",
              "      <th>GATE_Free</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.202</td>\n",
              "      <td>4442.141</td>\n",
              "      <td>28760.0</td>\n",
              "      <td>27644.0</td>\n",
              "      <td>4557004.0</td>\n",
              "      <td>3195503.0</td>\n",
              "      <td>1976.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26d1cfd0-a400-4a2c-ab46-e3f9ad6ba494')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-26d1cfd0-a400-4a2c-ab46-e3f9ad6ba494 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-26d1cfd0-a400-4a2c-ab46-e3f9ad6ba494');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_3cd3ea05-2c64-41d0-aad3-8589750cba5e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_route_new')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3cd3ea05-2c64-41d0-aad3-8589750cba5e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_route_new');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_route_new",
              "summary": "{\n  \"name\": \"new_route_new\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"const\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COUPON\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.202,\n        \"max\": 1.202,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.202\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4442.141,\n        \"max\": 4442.141,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4442.141\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S_INCOME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 28760.0,\n        \"max\": 28760.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          28760.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E_INCOME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 27644.0,\n        \"max\": 27644.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          27644.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S_POP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4557004.0,\n        \"max\": 4557004.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4557004.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E_POP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3195503.0,\n        \"max\": 3195503.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3195503.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DISTANCE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1976.0,\n        \"max\": 1976.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1976.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SLOT_Free\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GATE_Free\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 모델 (viii)를 사용해 예측 수행\n",
        "predicted_y_new = best_model_new.predict(new_route_new).values[0]\n",
        "print(\"예측값:\", predicted_y_new)"
      ],
      "metadata": {
        "id": "N_4ADXgKJaBF",
        "outputId": "65006b7e-149e-4eae-cada-1c30ad1bf8e5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "예측값: 220.663875633614\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**x. 이 모델과 모델(iii)의 예측 정확도를 비교하시오. 이 모델은 충분히 좋은가? 일단 신규 노선의 운행을 시작하고 난 후, 모델을 재평가할 필요가 있겠는가?**"
      ],
      "metadata": {
        "id": "Rblua8VCO8fG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 예측 정확도 지표 계산을 위한 전역탐색 변수 생성\n",
        "# 1. 검증세트에서 전역탐색으로 뽑힌 변수만 추출\n",
        "X_valid_new = X_valid[list(best_subset_new)]  # 사전에 알 수 있는 정보만 사용한 모델에서 나온 subset 사용\n",
        "X_valid_new_const = sm.add_constant(X_valid_new)\n",
        "\n",
        "# 2. 예측 (사전에 알 수 있는 정보만 사용해서 학습시킨 모델)\n",
        "y_pred_new = best_model_new.predict(X_valid_new_const)\n",
        "\n",
        "# 평가지표 (RMSE)\n",
        "def rmse(y_true, y_pred):                           # 실제값과 예측값의 차이를 제곱해서 평균낸 뒤, 다시 루트(제곱근)\n",
        "    return np.sqrt(np.mean((y_true - y_pred)**2))   # 오차가 클수록 더 불리하게 반영\n",
        "\n",
        "rmse_new = rmse(y_valid, y_pred_new)\n",
        "print(\"New Best Model - RMSE:\", rmse_new)"
      ],
      "metadata": {
        "id": "uCEk2EL7KTdh",
        "outputId": "7305fe8a-bb01-4b1d-f7e7-c60cb01d227c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "New Best Model - RMSE: 41.26972234881591\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "|            | RMSE | Adjusted R² |\n",
        "| ---------- | :-----------: | :---------: |\n",
        "| 모델 (iii)   |     35.30     |    0.7738    |\n",
        "| 모델 (viii) |     41.27     |    0.6794    |\n",
        "\n",
        "1. 예측정확도\n",
        "RMSE 값을 비교:\n",
        "RMSE값이 작을수록 모델의 예측력 정확\n",
        "모델(iii)의 예측정확도가 더 높음.\n",
        "2. 설명력\n",
        "Adjusted R²값을 비교:\n",
        "Adjusted R²값이 클수록 모델의 설명력 향상\n",
        "모델(iii)의 설명력이 더 좋음.\n",
        "\n",
        "- 값의 차이가 꽤 유의미하므로, 사전에 알 수 없는 정보라고 여겨지던 휴양지노선 여부, 특정항공사 노선 진입할지 여부, 승객 수 변수가 결과값에 영향력이 높았음을 파악할 수 있다.\n",
        "- 노선이 실제로 설치되고, 승객 수, 특정항공사가 노선에 진입한지 여부 등을 업데이트하여 모델의 정확도를 높일 필요가 있다."
      ],
      "metadata": {
        "id": "t93adaiGOBkz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **C-d : 노선 운임 예측 → 사우스웨스트 등장이 미치는 영향 평가 / 분석 과정의 변화 (기술적, 개념적)**"
      ],
      "metadata": {
        "id": "G_A64zarjtaN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "사우스웨스트 항공의 영향 평가 및 분석 과정 변화\n",
        "\n",
        "I. 사우스웨스트 등장이 미치는 영향\n",
        "\n",
        "    1. 직접적 영향\n",
        "\n",
        "        1) 운임 효과\n",
        "            - SW 취항 노선: $98.38\n",
        "            - 미취항 노선: $188.18\n",
        "            - 평균 운임 감소: -$89.80 (-47.7%)\n",
        "        - 이는 단일 항공사 등장만으로도 운임이 절반 수준으로 하락했다는 강력한 정량적 증거임.\n",
        "\n",
        "        2) 시장 구조 변화\n",
        "            - 사우스웨스트는 저비용 구조(LCC)를 무기로 삼아 시장에 진입\n",
        "            - 결과적으로\n",
        "                - 경쟁 강도 증가\n",
        "                - 시장 집중도 감소\n",
        "                - 진입 장벽 완화\n",
        "\n",
        "    2. 간접적 영향\n",
        "\n",
        "        1) 산업 구조적 변화\n",
        "            - 저비용 항공사 모델 확산\n",
        "            - 기존 항공사 운영 모델 변화\n",
        "            - 산업 표준의 재정립\n",
        "\n",
        "        2) 소비자 혜택\n",
        "            - 항공 운임 전반적 하락\n",
        "            - 소비자 입장에서 선택의 폭과 가격 대비 서비스 가치가 증가\n",
        "\n",
        "\n",
        "II. 분석 과정의 변화\n",
        "\n",
        "    1. 기술적 변화 (Technical Changes)\n",
        "\n",
        "        A. 데이터 분석 방법\n",
        "            1) 초기 분석\n",
        "                - 단순 평균 비교\n",
        "                - 상관계수만을 활용한 1차 분석\n",
        "\n",
        "            2) 고도화된 분석\n",
        "                - 다변량 회귀분석\n",
        "                - 교차검증\n",
        "                - 예측모델 구축 (R² = 0.838, RMSE = 31.42)\n",
        "                - 가변수 처리 및 상호작용 변수 생성을 통해 범주형 변수도 효과적으로 포함\n",
        "\n",
        "        B. 모델링 접근법\n",
        "\n",
        "            1) 변수 처리\n",
        "                - 범주형 변수 더미화\n",
        "                - 변수 간 상호작용 고려\n",
        "                - 다차원 변수 통합\n",
        "\n",
        "            2) 분석 기법 고도화\n",
        "                - 고급 통계 기법 적용\n",
        "                - 모델 검증 강화\n",
        "                - 예측력 평가 체계화\n",
        "\n",
        "    2. 개념적 변화 (Conceptual Changes)\n",
        "\n",
        "        A. 분석 관점 확장\n",
        "\n",
        "            1) 단순 효과에서 구조적 분석으로\n",
        "                - 시장 구조 변화 분석\n",
        "                - 경쟁 동태성 고려\n",
        "                - 장기 영향 평가\n",
        "\n",
        "            2) 다차원적 접근\n",
        "                - 직접 효과: 운임 인하, 항공 수요 변화\n",
        "                - 간접 효과: 산업 표준 재편, 소비자 혜택 증대, 정책적 시사점 확대\n",
        "\n",
        "        B. 해석의 심화\n",
        "\n",
        "            1) 직접 효과 분석\n",
        "                - 운임 변화\n",
        "                - 시장 점유율\n",
        "                - 경쟁 구도\n",
        "\n",
        "            2) 간접 효과 분석\n",
        "                - 산업 구조 재편\n",
        "                - 혁신 확산\n",
        "                - 소비자 행동 변화\n",
        "\n",
        "\n",
        "III. 종합 평가\n",
        "\n",
        "    1. 분석의 발전\n",
        "        - 단순 가격 분석에서 구조적 분석으로 진화\n",
        "        - 다차원적 접근 방법 도입\n",
        "        - 장기적 영향 고려 강화\n",
        "\n",
        "    2. 주요 발견사항\n",
        "\n",
        "        1) 정량적 발견\n",
        "            - 유의미한 운임 감소 효과\n",
        "            - 높은 모델 설명력\n",
        "            - 안정적 예측 성능\n",
        "\n",
        "        2) 정성적 발견\n",
        "            - 시장 구조 변화\n",
        "            - 산업 혁신 촉진\n",
        "            - 소비자 후생 증대\n",
        "\n",
        "    3. 시사점\n",
        "        1) 학술적 시사점\n",
        "            - 항공운임 분석에 있어 사우스웨스트는 구조적 변수로 간주 가능. 가격 결정 모형 정교화 가능\n",
        "\n",
        "        2) 실무적 시사점\n",
        "            - 경쟁 정책 수립 근거\n",
        "            - 기업 전략 수립 지침\n",
        "            - 산업 발전 방향 제시\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "사우스웨스트 항공의 등장이 미친 혁명적 변화\n",
        "사우스웨스트 항공의 등장은 항공 산업에 혁명적인 변화를 가져왔다고 볼 수 있다. 가장 눈에 띄는 변화는 운임의 극적인 감소다.\n",
        "\n",
        "분석 결과에 따르면, 사우스웨스트가 취항한 노선의 평균 운임은 98.38달러로, 취항하지 않은 노선의 188.18달러와 비교하면 거의 절반 수준으로 낮아졌다. 이는 단순히 숫자상의 변화에 그치지 않고, 항공 여행을 더 많은 사람들이 이용할 수 있게 만든 중요한 전환점이었다.\n",
        "\n",
        "시장 구조의 재편성과 산업 전반의 혁신\n",
        "사우스웨스트의 진입은 시장 구조 자체를 변화시켰다. 기존에는 소수의 대형 항공사들이 시장을 지배했지만, 사우스웨스트의 등장으로 인해 경쟁이 활성화되었다. 이는 전반적인 서비스 향상과 운영 효율성 증대로 이어졌다.\n",
        "\n",
        "특히, 저비용 항공사(LCC) 모델을 성공적으로 정착시킴으로써, 다른 항공사들도 이를 벤치마킹하게 되었고, 결과적으로 산업 전체의 혁신을 유도하게 되었다. 사우스웨스트는 단순한 경쟁자가 아니라 산업 패러다임을 바꾼 선도자였다.\n",
        "\n",
        "부정적 측면과 균형 잡힌 시각\n",
        "물론 이러한 변화가 모든 면에서 긍정적인 것만은 아니었다. 기존 항공사들은 수익성 악화라는 큰 도전에 직면했으며, 과도한 가격 경쟁으로 인해 서비스 품질 저하에 대한 우려도 발생했다.\n",
        "\n",
        "그럼에도 불구하고, 소비자 입장에서 선택권이 넓어지고, 항공 여행이 보다 접근 가능한 서비스로 변화했다는 점에서, 전체적으로는 긍정적인 변화로 평가할 수 있다.\n",
        "\n",
        "데이터 분석을 통한 실증적 검증\n",
        "우리가 수행한 분석에서도 사우스웨스트의 영향력은 통계적으로 유의미하게 나타났다. **모델의 설명력(R² = 0.838)**이 매우 높게 나타났다는 점은, 사우스웨스트의 존재가 운임 결정에 실제로 매우 큰 영향을 미쳤다는 사실을 뒷받침한다.\n",
        "\n",
        "결론: 항공 산업의 패러다임 전환 사례\n",
        "결론적으로, 사우스웨스트 항공의 시장 진입은 단순한 기업의 진입을 넘어서, 항공 산업 전체의 패러다임을 바꾼 혁신적 사례로 평가할 수 있다.\n",
        "\n",
        "이는 경쟁을 통한 시장 효율성 증대와 소비자 후생 향상이라는 경제학의 기본 원리를 실제로 보여준 훌륭한 사례이며, 향후 유사 산업 분석이나 정책 설계에도 중요한 실증적 프레임워크를 제공한다."
      ],
      "metadata": {
        "id": "gf4PIz_RsDZN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "실습 코드"
      ],
      "metadata": {
        "id": "NKRPIaKAunYT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from scipy.stats import ttest_ind\n",
        "\n",
        "# 데이터 불러오기\n",
        "df = pd.read_csv(\"Airfares.csv\")\n",
        "\n",
        "#1. SW 유무에 따른 평균 운임 비교\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.boxplot(x='SW', y='FARE', data=df)\n",
        "plt.title('SW 운항 여부에 따른 평균 운임 분포')\n",
        "plt.show()\n",
        "\n",
        "#2. SW 유무에 따른 평균 FARE 차이 + 통계 검정\n",
        "sw_yes = df[df['SW'] == 'Yes']['FARE']\n",
        "sw_no = df[df['SW'] == 'No']['FARE']\n",
        "\n",
        "t_stat, p_value = ttest_ind(sw_yes, sw_no, equal_var=False)\n",
        "print(f\"평균 운임 (SW=Yes): ${sw_yes.mean():.2f}\")\n",
        "print(f\"평균 운임 (SW=No): ${sw_no.mean():.2f}\")\n",
        "print(f\"t-통계량: {t_stat:.4f}, p-value: {p_value:.4e}\")\n",
        "\n",
        "#3. SW와 DISTANCE 상호작용 효과 분석\n",
        "df['SW_bin'] = (df['SW'] == 'Yes').astype(int)\n",
        "df['Interaction'] = df['SW_bin'] * df['DISTANCE']\n",
        "\n",
        "X = df[['DISTANCE', 'SW_bin', 'Interaction']]\n",
        "y = df['FARE']\n",
        "\n",
        "model = LinearRegression()\n",
        "model.fit(X, y)\n",
        "\n",
        "print(\"\\n 상호작용 회귀계수:\")\n",
        "print(f\"DISTANCE 계수: {model.coef_[0]:.4f}\")\n",
        "print(f\"SW 계수: {model.coef_[1]:.4f}\")\n",
        "print(f\"상호작용(DISTANCE*SW) 계수: {model.coef_[2]:.4f}\")\n",
        "\n",
        "#4. 시각화 - 거리 대비 FARE, SW 여부에 따른 분포\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=df, x='DISTANCE', y='FARE', hue='SW', alpha=0.6)\n",
        "plt.title(\"거리(DISTANCE)에 따른 운임(FARE), SW 여부 비교\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "fUk1yHiYulNI",
        "outputId": "27913b88-f08c-462b-9d1f-02c5fa8fa25c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50868 (\\N{HANGUL SYLLABLE UN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54637 (\\N{HANGUL SYLLABLE HANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50640 (\\N{HANGUL SYLLABLE E}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46384 (\\N{HANGUL SYLLABLE DDA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47480 (\\N{HANGUL SYLLABLE REUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54217 (\\N{HANGUL SYLLABLE PYEONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44512 (\\N{HANGUL SYLLABLE GYUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51076 (\\N{HANGUL SYLLABLE IM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48516 (\\N{HANGUL SYLLABLE BUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54252 (\\N{HANGUL SYLLABLE PO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44144 (\\N{HANGUL SYLLABLE GEO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47532 (\\N{HANGUL SYLLABLE RI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50640 (\\N{HANGUL SYLLABLE E}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46384 (\\N{HANGUL SYLLABLE DDA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47480 (\\N{HANGUL SYLLABLE REUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50868 (\\N{HANGUL SYLLABLE UN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51076 (\\N{HANGUL SYLLABLE IM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48708 (\\N{HANGUL SYLLABLE BI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44368 (\\N{HANGUL SYLLABLE GYO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "평균 운임 (SW=Yes): $98.38\n",
            "평균 운임 (SW=No): $188.18\n",
            "t-통계량: -19.3416, p-value: 4.4179e-64\n",
            "\n",
            " 상호작용 회귀계수:\n",
            "DISTANCE 계수: 0.0650\n",
            "SW 계수: -77.0417\n",
            "상호작용(DISTANCE*SW) 계수: 0.0124\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}